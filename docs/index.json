[
{
	"uri": "https://bonartm.github.io/data-librarian/cheatsheet/",
	"title": "Cheat Sheet",
	"tags": [],
	"description": "",
	"content": "Other Resources  https://librarycarpentry.org/ https://automatetheboringstuff.com/ https://librarycarpentry.org/lc-python-intro/  read in .csv files import pandas as pd file_path = \u0026#39;./Library_Usage.csv\u0026#39; df = pd.read_csv(file_path) show column names and their types df.columns df.dtypes number of rows len(df) summarize functions df.head() df.tail() df.describe() filter on columns df[[\u0026#34;colA\u0026#34;, \u0026#34;colB\u0026#34;, \u0026#34;colC\u0026#34;]] filter on rows by index df.iloc[[1, 10, 15]] filter on rows by logical query df.loc[df[\u0026#34;colA\u0026#34;] \u0026gt; 100] some descriptive statistics for columns df[\u0026quot;colA\u0026quot;].max() df[\u0026quot;colA\u0026quot;].max() df[\u0026quot;colA\u0026quot;].mean() df[\u0026quot;colA\u0026quot;].median() df[\u0026quot;colA\u0026quot;].std() df[\u0026quot;colA\u0026quot;].var() correlation df[\u0026#34;colA\u0026#34;].corr(df[\u0026#34;colB\u0026#34;], method=\u0026#39;pearson\u0026#39;) frequency tables df[\u0026#34;colA\u0026#34;].value_counts(normalize=True) cross tabulation pd.crosstab(df[\u0026#34;colA\u0026#34;], df[\u0026#34;colB\u0026#34;]) basic plots # histogramm df[\u0026#34;colA\u0026#34;].hist() # boxplot df[\u0026#34;colA\u0026#34;].plot.box() df.plot.box() # scatter plot df.plot.scatter(x=\u0026#39;colA\u0026#39;, y=\u0026#39;colB\u0026#39;) t-test "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/univariate/frequency/",
	"title": "Häufigkeiten",
	"tags": [],
	"description": "",
	"content": "Kategoriale (nominale und ordinale) Variablen werden in Häufigkeitstabellen zusammengefasst. Dabei wird für jede Ausprägung die Anzahl der Beobachtungen gezählt:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df[\u0026#39;Age Range\u0026#39;].value_counts()    Mit der Funktion value_counts() können Sie sich absolute Häufigkeitstabellen ausgeben lassen. Mit dem zusätzlichen Argumentaufruf normalize=True werden relative Häufigkeiten berechnet:\ndf[\u0026#39;Age Range\u0026#39;].value_counts(normalize=True)    Der Modus ist dabei die Merkmalsausprägung, die die meisten Beobachtungen besitzen: df[\u0026#39;Age Range\u0026#39;].mode()    Visualisierung Häufigkeitstabellen lassen sich idealerweise als Balkendiagramme visualisieren:\nimport pandas as pd import seaborn as sns sns.set() %matplotlib inline df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;, na_values=[\u0026#34;none\u0026#34;]) pd.crosstab( df[\u0026#39;Provided Email Address\u0026#39;], df[\u0026#39;Notice Preference Definition\u0026#39;], margins=False, normalize=0 ).plot.bar()    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/",
	"title": "Modul 3",
	"tags": [],
	"description": "",
	"content": "Daten analysieren und verstehen Herzlichen Willkommen zum dritten Modul Daten analysieren und darstellen des Data Librarian Zertifikationskurs. In diesem Modul möchten wir Ihnen einen praktischen Einblick in die Datenanalyse mit der Programmiersprache Python geben.\nNachdem Sie im ersten Modul schon die grundlegenden Werkzeuge und Programmiertechniken kennen gelernt haben, werden Sie sich in den kommenden Wochen anhand von praktischen Beispielen und Aufgaben Grundlagen der deskriptiven Statistik, der Datenvisualisierung und des Maschinellen Lernens aneignen. Dabei können Sie Ihre Programmier- und Datenanalysekenntnisse in Python verbessern und im bibliothekarischen Kontext anwenden.\n Die Kurseinheiten bauen aufeinander auf. Wir empfehlen Ihnen deswegen durch die Inhalte dieses Moduls mit den Pfeiltasten zu navigieren. In der linken Navigationsleiste wird Ihr Fortschritt gespeichert. Diese Webseite ist für alle Endgeräte optimiert. Sie können deswegen auch Ihr Smartphone oder Tablet zum Lesen nutzen. Starten Sie nun mit der ersten Kurseinheit indem Sie auf klicken oder mit den Pfeiltasten navigieren.    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/packages/numpy/",
	"title": "numpy",
	"tags": [],
	"description": "Effizientes Handling und Bearbeitung von numerischen Arrays.",
	"content": "numpy bietet den array als zentrale Datenstruktur. Mit ihm lassen sich numerische Daten effizient im Arbeitsspeicher (RAM) erstellen, ein- und auslesen, bearbeiten und aggregieren.\nNumpy bietet neben dem array viele Funktionen an, mit denen sich effizient Berechnungen auf diesen durchführen lassen können. Außerdem wird die klassische Matrizenrechnung unterstützt.\n# import the library and give it a shorter name \u0026#39;np\u0026#39; import numpy as np # create 100 randomly distributed numbers X = np.normal.random(size=100) # transform X into a 2-dimensional array of size 20x5 X.reshape((20, 5)) # calculate the matrix dot product: X*X\u0026#39;, where X\u0026#39; is the transformation of X X.dot(X.T)    Beispielsweise kann ein Bild als dreidimensionales numpy array dargestellt werden: Die ersten zwei Dimensionen beschreiben die Farbintensität der Pixel auf einer zweidimensionalen Fläche. Die dritte Dimension speichert die jeweiligen Pixelwerte für die Farbkanäle rot, grün und blau.\n  https://www.oreilly.com/library/view/elegant-scipy/9781491922927/ch01.html\n  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/pandas/series/",
	"title": "Series und DataFrames",
	"tags": [],
	"description": "",
	"content": "Series und DataFrames sind die zentralen Datenstrukturen in Pandas. Series sind wie Standard Python-Listen, mit dem wichtigen Unterschied, dass Series nur Werte eines Datentyps enthalten können.\nimport pandas as pd x = pd.Series([34, 12, 23, 45]) print(x)    Ein Datentyp ist die grundlegende Einheit, in der einzelne Werte in einer Programmiersprache vom Computer gespeichert werden können. Beispiele für Datentypen in Python sind: float, int, str, bool oder datetime.\n  Ein DataFrame fasst mehrere Series gleicher Länge zu einer Datentabelle mit Zeilen (Beobachtungen), Spalten (Variablen) und Spaltennamen (Variablennamen) zusammen.\nDataFrames können beispielsweise aus Python-Dictionaries gebildet werden:\nimport pandas as pd data = {\u0026#39;month\u0026#39;: [\u0026#39;Jan\u0026#39;, \u0026#39;Feb\u0026#39;, \u0026#39;Mar\u0026#39;], \u0026#39;temp\u0026#39;: [\u0026#39;-5\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;]} df = pd.DataFrame(data) print(df)    In der praktischen Datenanalyse werden Sie nur selten DataFrames oder Series manuell erstellen, sondern im Computer abgespeicherte Datentabellen aus anderen Formaten, wie Excel oder .csv einlesen.\n"
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/ml/statistic/",
	"title": "Statistik",
	"tags": [],
	"description": "",
	"content": " Justus Perthes (1838): Rhein, Elbe und Oder   Statistik ist die traditionelle Wissenschaft von der Erhebung und Analyse von Daten. Sie verfügt über eine großes theoretisches und mathematisches Fundament und lässt sich in die Teilgebiete deskriptive (Beschreiben), explorative (Suchen) und schließende (Induktion) Statistik unterteilen.\nLesen Sie mehr über die Grundlagen der Statistik im Kapitel Grundbegriffe der Statistik.\n"
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/pandas/io/",
	"title": "Ein- und Ausgabe",
	"tags": [],
	"description": "",
	"content": "Die Ein- und Ausgabe von Daten in pandas ist umfangreich aber einfach. Um eine .csv Datei einzulesen und in einer Variable zu speichern verwenden Sie die Funktion read_csv:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df.head()    Um einen eingelesenen Datensatz beispielsweise im .json Textformat zu speichern verwenden Sie die Funktion to_json:\ndf.to_json(\u0026#34;../data/Library_Usage.json\u0026#34;)     Manche Funktion in pandas sind statische Funktionen, d.h. sie sind an kein konkretes Objekt gebunden. Beispiele: pd.read_csv, pd.to_numeric, pd.crosstab. Andere Funktionen sind an ein Objekt, welches mit einer Variable referenziert wird, gebunden. Dies kann ein konkreter DataFrame mit dem Variablennamen df oder eine Series sein. Beispiele: df.to_csv, df.corr, df.head. Machen Sie sich mit dem Unterschied vertraut. Was bedeuten pd und df in den Beispielen?    Datenrundreise  Informieren Sie sich hier über die verschiedenen Funktionen zur Ein- und Ausgabe. Lesen Sie den Datensatz \u0026quot;../data/Library_Usage_Small.csv\u0026quot; ein. Er enthält nur die ersten 100 Zeilen des originalen Datensatzes (aus Performancegründen). Speichern sie den DataFrame als .json ab. Lesen Sie die .json ein und speichern Sie den DataFrame als .html Tabelle ab. Die .html Datei können Sie danach auch mit einem Browser öffnen. Lesen Sie dann die .html Datei ein und speichern Sie den DataFrame als .xlsx Datei ab. Lesen Sie nun die .xlsx Datei ein und speichern Sie den DataFrame wieder als .csv ab. Achten Sie darauf, den ursprünglichen originalen Datensatz nicht zu überschreiben. Vergleichen Sie die originale .csv Version mit der Version, nach der Datenrundreise. Ist alles gleich geblieben?    Exkurs: Was bedeutet einlesen? Die Festplatte des Computers dient zur persistenten Speicherung von Dateien. Auch wenn der Strom weg ist, bleiben diese auf der Festplatte erhalten. Diese Speicherfähigkeit hat ihren Preis: Die Zugriffszeiten, d.h. die Zeit die die Festplatte benötigt um z.B. Zeilen einer Textdatei zu lesen und die Werte an den Prozessor zu übergeben, sind hoch.\nDeswegen gibt es neben dem Festplattenspeicher auch noch den Arbeitsspeicher (RAM). Dessen Zugriffszeiten sind wesentlich schneller, die Daten sind jedoch nicht persistent. Wenn Sie z.B. eine Tabelle mit Excel öffnen, dann werden die Daten von der Festplatte in den Arbeitsspeicher geladen. Das gleiche, nur ohne graphische Oberfläche, passiert, wenn Sie Daten mit dem pandas Paket einlesen.\nDa normalerweise der Datensatz komplett in den Arbeitsspeicher geladen werden muss, können prinzipiell nicht beliebig große Datenmengen bearbeitet werden.\n Finden Sie heraus, wie viel freier Arbeitsspeicher Ihr Computer hat (Das Betriebssystem und Hintergrundprogramme verbrauchen auch RAM). Wie viele int64 Werte, also Zahlen, die 8 Byte (=64 Bit) Speicher benötigen, können Sie damit theoretisch in den Arbeitsspeicher laden? Wie viele Beobachtungen kann eine Tabelle mit 100 Variablen damit maximal theoretisch haben, damit Sie diese noch bearbeiten können? Nutzen Sie die Funktion memory_usage um sich den tatsächlich benötigten Speicher eines DataFrames oder einer Series anzeigen zu lassen.    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/ml/ml/",
	"title": "Machine Learning",
	"tags": [],
	"description": "",
	"content": "Seit der Erfindung des Personal Computers und des Internets werden statistische Probleme immer komplexer und größer und die neuen Datenmengen erfordern neue effiziente Strukturen zum Speichern und Auffinden der Informationen.\nMaschinelles Lernen (\u0026ldquo;Statistical Learning\u0026rdquo;) bedeutet in diesem Kontext relevante und signifikante Muster und Trends aus den Daten zu extrahieren und die Daten \u0026ldquo;zu verstehen\u0026rdquo;. Dabei spielen Computer und deren wachsende Rechenpower eine immer größere Rolle. Sie haben die klassische Statistik revolutioniert und es sind vor allem Ingenieure und Informatiker, die die Weiterentwicklung der Disziplin heutzutage vorantreiben.1\nIm Gegensatz zur klassischen Statistik, steht im Maschinellen Lernen auch viel stärker die Vorhersagekraft und Generalisierbarkeit von Methoden im Vordergrund und weniger ein Verständnis der kausalen Zusammenhänge.\nWährend die klassische Statistik oft an der Interpretation von kausalen Einflüssen einzelner Faktoren auf ein Ergebnis interessiert ist, sind Black-Box Modelle im Maschinellen Lernen viel präsenter: Ziel ist es oft, möglichst gute Prognosen, beispielsweise bei der Gesichtserkennung, zu machen. Dabei spielt letztendlich das genaue Modell und die Gewichte für die Variablen nur eine untergeordnete Rolle.\nTeachable Machine von Google ermöglicht das Trainieren von Machine Learning Modellen im eigenen Web-Browser ohne das Programmiercode geschrieben werden muss. Somit wird ML auch ohne Vorkenntnisse erfahrbar und man bekommt ein gutes Gespür für die Möglichkeiten und Grenzen dieser Methoden.\nExperimentieren Sie zum Beispiel mit dem Bild-Klassifikator.\n  Maschinelles Lernen und Statistik haben viele Schnittmengen. ML kann auch als Teilgebiet der Künstlichen Intelligenz aufgefasst werden. KI wird definiert als: Die Bemühung, intellektuelle Aufgaben, die normalerweise von Menschen durchgeführt werden, zu automatisieren.2\nKI kann auch allein mit durch Programmierer fest eingebauten Regeln entstehen und ist damit bei klaren logischen Problemen auch sehr erfolgreich (z.B. Schachcomputer). Systeme des Maschinellen Lernens werden hingegen trainiert: Es werden viele Beispiele mit Eingabe- und Ausgabedaten vorgegeben und das System lernt selbstständig die \u0026ldquo;Regeln\u0026rdquo;. Diese können dann auf neue Daten, von denen keine Ausgabe bekannt ist, angewandt werden, um Prognosen zu erstellen.2\n  Hastie, Tibshirani, Friedman (2017): The Elements of Statistical Learning, Springer. \u0026#x21a9;\u0026#xfe0e;\n Francois Chollet (2018): Deep Learning with Python, Manning. \u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/pandas/columns/",
	"title": "Auswahl und Erstellung von Spalten",
	"tags": [],
	"description": "",
	"content": "Die Spalten eines DataFrames werden über einen Spaltenindex referenziert. Üblicherweise besteht der Spaltenindex aus Spaltennamen in Textform:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df.columns    Einzelne Spalten können wie bei einem Python Dictionary mit df[\u0026lt;name\u0026gt;] ausgewählt werden. Mehre Spalten mit df[[\u0026lt;name1\u0026gt;, \u0026lt;name2]]:\ndf[\u0026#39;Total Renewals\u0026#39;] df[[\u0026#39;Total Renewals\u0026#39;, \u0026#39;Total Checkouts\u0026#39;]] filter = [\u0026#39;Total Renewals\u0026#39;, \u0026#39;Total Checkouts\u0026#39;] # auxiliary variable df[filter]    Neue Spalten können mit einer Zuweisung (=) erstellt werden: df[\u0026#39;dummy_variable\u0026#39;] = 5    Berechnungen auf schon bestehenden Variablen können auch direkt einer neuen Spalte zugeordnet werden:\nimport numpy as np df[\u0026#39;is_adult\u0026#39;] = df[\u0026#39;Patron Type Definition\u0026#39;] == \u0026#39;ADULT\u0026#39; df[\u0026#39;log_renewals\u0026#39;] = np.log(df[\u0026#39;Total Renewals\u0026#39;])    Im ersten Beispiel wurde zuerst die Anweisung df['Patron Type Definition'] == 'ADULT' durchgeführt. Das implizite Ergebnis dieser Anweisung ist eine Series mit booleschen Werten (True oder False). Die neu erstellte Series wird dann in einer neuen Spalte is_adult dem DataFrame angehängt.\nIm zweiten Beispiel wurde der Logarithmus auf den Werten der Spalte Total Renewals berechnet und einer neuen Spalte log_renewals zugewiesen.\n Die Spalte Circulation Active Year ist als Text und nicht als Zahl abgespeichert! Konvertieren Sie die Spalte in ein numerisches Format: pd.to_numeric(df[\u0026#39;Circulation Active Year\u0026#39;], errors=\u0026#39;coerce\u0026#39;) Überschreiben Sie die ursprüngliche Variable mit den neuen Werten.\n Erstellen Sie eine neue Variable 'Membership Duration' die die Zeit in Jahren zwischen der Registrierung im System und der letzten Ausleihaktivität des Kunden enthält.    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/ml/data-science/",
	"title": "Data Science",
	"tags": [],
	"description": "",
	"content": "Grundsätzlich ist ein Data Scientist jemand, die oder der Wissen und Erkenntnisse aus strukturierten und unstrukturierten Daten gewinnt. Data Science ist eine interdisziplinäre Disziplin, denn sie liefert eine Sammlung an quantitativen Methoden- und Algorithmen, die in einem Fachgebiet angewandt werden können 1. Damit liegt Data Science irgendwo in der Schnittmenge von Mathe/ Statistik, Programmierung (\u0026ldquo;Hacking skills\u0026rdquo;) und Fachwissen (\u0026ldquo;domain knowledge\u0026rdquo;/ \u0026ldquo;substantive expertise\u0026rdquo;).\nAufgrund der stark angewachsenen Mengen an unstrukturierten Daten aus heterogenen Datenquellen (Text, Bilder, Sensoren, Netzwerke, Videos, \u0026hellip;) reichen die Methoden und Fertigkeiten, die die Statistik traditionellerweise liefert und vermittelt, nicht mehr aus, um diese Daten effizient zu strukturieren, aggregieren, kombinieren, analysieren und visualisieren zu können:\n A Data Scientist is someone who knows more statistics than a computer scientist and more computer science than a statistician 2.\n taken from http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram\n  Jake VanderPlas (2019): Python Data Science Handbook, O'Reilly \u0026#x21a9;\u0026#xfe0e;\n Joel Grus (2019): Data Science from Scratch, O'Reilly. \u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/pandas/rows/",
	"title": "Auswahl von Zeilen",
	"tags": [],
	"description": "",
	"content": "Die Zeilen eines DataFrames werden über einen Zeilenindex (loc[]), über die aufsteigenden Zeilennummern (iloc[]) oder über logische Ausdrücke ([] oder loc[]) referenziert.\nHier wird zuerst der wichtigste letzte Fall näher betrachtet:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df[df[\u0026#39;Total Checkouts\u0026#39;] \u0026gt; 10000]    Der Ausdruck df['Total Checkouts'] \u0026gt; 10000 wird zuerst ausgewertet und ergibt eine boolesche Series mit Einträgen True wenn die Beobachtung mehr als 1000 Ausleihen getätigt hat und False sonst.\nMit einer booleschen Series lassen sich dann die Zeilen des DataFrame auswählen: Es werden genau die Zeilen zurückgegeben, bei denen die Series True Werte enthält.\nAnstatt alles in einer Zeile zu schreiben, können wir auch eine Hilfsvariable erstellen, die den booleschen Vektor zwischenspeichert:\nfilter = df[\u0026#39;Total Checkouts\u0026#39;] \u0026gt; 10000 df[filter]    Für den booleschen Zeilenfilter können komplexe logische Ausdrücke unter Zuhilfenahme der Operatoren \u0026lt;, \u0026gt;, \u0026amp;, |, == u.s.w. gebildet werden:\nfilter = (df[\u0026#39;Patron Type Definition\u0026#39;] == \u0026#39;SENIOR\u0026#39;) \u0026amp; (df[\u0026#39;Notice Preference Definition\u0026#39;] == \u0026#39;email\u0026#39;) df[filter]    Logische Operatoren    Ausdruck Beschreibung     \u0026lt;/ \u0026lt;= kleiner/ kleiner gleich   \u0026gt; / \u0026gt;= größer/ größer gleich   == gleich   != ungleich   \u0026amp; elementweises logisches und   | elementweises logisches oder   ~ elementweise logische negation       Filter Sie den Datensatz nach Kindern unter 10 Jahren. Wie viele Einträge erhalten Sie? Gibt es Personen mit mehr als 20000 Ausleihen? Wie viele Personen stammen aus dem Norden San Franciscos (Supervisor Districts 1, 2 und 3)? Nutzen Sie die Funktion Series.isin().    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/pandas/na/",
	"title": "Fehlende Werte",
	"tags": [],
	"description": "",
	"content": "Real erhobene Daten sind meistens unsauber und fehlerhaft. Ein häufiges Problem dabei sind fehlende Werte, also Beobachtungen für die manche Merkmale nicht erhoben wurden. In jedem Datensatz werden fehlende Werte anders gekennzeichnet, aber man findet meistens diese Kodierungen wieder: \u0026quot;-999\u0026quot;, \u0026quot;NA\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;None\u0026quot;, \u0026quot;NULL\u0026quot;, \u0026quot;#N/A\u0026quot;.\nWenn beispielsweise der Mittelwert einer statistischen Variable berechnet wird, so muss entschieden werden, wie mit fehlenden Werten umgegangen werden soll: Sollen die Werte entfernt werden? Sollen die fehlenden Werte durch durch einen bestimmten Wert ersetzt werden?\nIn DataFrames werden fehlende Werte durch zwei Arten angezeigt: Das Schlüsselwort NaN (\u0026ldquo;Not a Number\u0026rdquo;) wird in numerischen Series verwendet. Das Schlüsselwort None in nicht-numerischen.\nBeim Einlesen von Daten (siehe z.B. die read_csv Funktion) können mit dem Argument na_values zusätzliche Kodierungen für fehlerhafte Werte mit angegeben werden.\nFallbeispiel Der Library Usage Datensatz enthält die Kodierung \u0026quot;None\u0026quot; für fehlende Werte. Diese werden von pandas beim Einlesen von numerischen Spalten nicht richtig erkannt:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df[\u0026#39;Circulation Active Year\u0026#39;] Obwohl die Spalte 'Circulation Active Year' eigentlich numerisch ist, wird Sie von pandas als Text erkannt. Möchten Sie z.B. 2019 - df['Circulation Active Year'] berechnen, so werden Sie eine Fehlermeldung erhalten, da für Text-Werte keine Substraktionen durchgeführt werden können.\nUm das Problem zu beheben können Sie auf zwei Arten vorgehen. Sie können schon beim Einlesen, die Kodierung für fehlende Werte mit angeben:\ndf = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;, na_values=\u0026#34;None\u0026#34;) df[\u0026#39;Circulation Active Year\u0026#39;] Oder Sie führen nach dem Einlesen eine explizite Umwandlung des Datentyps durch:\ndf = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;, na_values=\u0026#34;None\u0026#34;) df[\u0026#39;Circulation Active Year\u0026#39;] = pd.to_numeric(df[\u0026#39;Circulation Active Year\u0026#39;], errors=\u0026#39;coerce\u0026#39;) df[\u0026#39;Circulation Active Year\u0026#39;]  Was unterscheidet den Wert None vom Wert \u0026quot;None\u0026quot;? Was den Wert 5 vom Wert \u0026quot;5\u0026quot;? Was den Wert \u0026quot;NaN\u0026quot; vom Wert NaN? Ist True und \u0026quot;True\u0026quot; das gleiche?\n  Behandlung von Fehlenden Werten Pandas bietet die nützlichen Funktionen isna(), notna(), dropna() und fillna() an um fehlende Werte zu identifizieren, zu entfernen oder mit anderen Werten zu ersetzen.\nFilter df[df[\u0026#39;Age Range\u0026#39;].isna()] df[df[\u0026#39;Age Range\u0026#39;].notna()]    Entfernen # drops all rows that contain missing values df.dropna() # drops all missing values in this series df[\u0026#39;Age Range\u0026#39;].dropna()     Lesen Sie den Datensatz ein und erstellen Sie einen DataFrame der keine Beobachtungen mit fehlenden Werten mehr enthält. Speicher Sie diesen unter dem Namen Library_Usage_Clean.csv ab. Wie viele Beobachtungen wurden dabei entfernt?    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/",
	"title": "Kursorganisation und Vorbereitungen",
	"tags": [],
	"description": "",
	"content": "21.01 – 26.01 Kursorganisation und Vorbereitungen Diese Einheit gibt einen Überblick über die Kursinhalte, wichtige Termine und die benötigte Software und Python-Pakete. Viele der hier besprochenen Dinge werden Ihnen schon bekannt vorkommen und die Software haben Sie voraussichtlich auch schon auf Ihrem Rechner installiert.\nZiele  Installieren Sie Anaconda mit Python 3.7 auf Ihrem Rechner Erstellen Sie einen Projektordner und fügen Sie einen Datensatz Ihrem Projektordner hinzu Stellen Sie sicher, dass Python Notebooks lokal ausgeführt werden können  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/modules/",
	"title": "Kurseinheiten",
	"tags": [],
	"description": "",
	"content": "Wir haben das Modul in wöchentliche Einheiten, die jeweils ein Gebiet aufgreifen und vertiefen, unterteilt. Sie können sich die Zeit für die Bearbeitung der Einheiten selber aufteilen, sollten aber jede Einheit am Ende der jeweiligen Woche abgeschlossen haben. Am Ende einer Woche wird die nächste Einheit auf dieser Webeite freigeschaltet.\nJede Einheit umfasst ein kleines praktisches Projekt, welches Sie in Form eines Jupyter Notebooks bearbeiten und aufbereiten. Ihr Notebook können Sie einreichen, um Feedback von den Kursleitern zu erhalten.\nDer erste Teil des Moduls (21-01 - 16.02) wird von Malte Bonart betreut und behandelt grundlegende klassische Konzepte der angewandten Statistik. Der zweite Teil des Moduls (10.02 - 04.03) wird von Konrad Förstner betreut und gibt einen Überblick über Themen des Maschinellen Lernens.\nAm Präsenztag, der am 05.03.2020 stattfindet, werden wir im voraus gesammelte Fragen gemeinsam beantworten und diskutieren. Sie werden Zeit haben, an einem persönlichen Datenanalyseprojekt zu arbeiten. Die Kursleiter werden Sie dabei unterstützen und individuell betreuen. Am Ende des Präsenztages stellen alle KursteilnehmerInnen ihre Ergebnisse in einer Kurzpräsentation vor.\nDen Source Code für diese Webseite und die weiteren Kursmaterialien finden Sie in einem öffentlichen GitHub Repository. Sie können sich optional das komplette Repository herunterladen indem sie folgenden Befehl in der Kommandozeile ausführen:\ngit clone https://github.com/bonartm/data-librarian.git    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/schedule/",
	"title": "Termine",
	"tags": [],
	"description": "",
	"content": "Hier finden Sie einen Überblick über die einzelnen Moduleinheiten.\n   Datum Titel Ziele     21.01 – 26.01 Vorbereitung Installieren Sie die benötigte Software Laden Sie die Kursmaterialien und Datensätze herunter Stellen Sie sicher, dass Python Notebooks lokal ausgeführt werden können   27.01 – 02.02 Grundlagen Beschreiben Sie Datensätze mit dem statistischen Grundvokabular Lesen Sie Datensätze als DataFrames in Python ein Filtern Sie DataFrames nach Spalten oder Zeilen Erstellen Sie neue Variablen   03.02 – 09.02 Deskriptive Statistik und Visualisierung Berechnen Sie grundlegende Lage- und Streuungsmaße Berechnen Sie Statistiken für bivariate Verteilungen Erstellen Sie einfache Visualisierungen   10.02 – 16.02 Inferenzstatistik / Maschinelles Lernen I Führen Sie einen Zwei-Stichproben Mittelwerttest durch Beschreiben Sie die Unterschiede zwischen Supervised und Unsupervised Learning   17.02 – 23.02 Maschinelles Lernen II Beschreiben Sie grundlegende Funktionsweisen und Konzepte von scikit-learn Führen Sie eine Regression, Klassifikation oder Clustering mit scikit-learn durch   24.02 – 01.03 Maschinelles Lernen III Beschreiben Sie die Funktionsweise von Text-Analyse mit NLTK oder spaCy Formulieren Sie einfache quantitative Fragen für den Projekttag als Expose (max. 1 Seite Text)   02.03 – 04.03 Vorbereitung Präsenztag Suchen Sie nach geeigneten Daten für den Projekttag Schicken Sie Ihre inhaltlichen und fachlichen Fragen an die Kursleiter   5.03 Präsenztag Nehmen Sie an der Frage und Antwortrunde teil Finden Sie geeignete Daten zum Lösen der Fragen Beantworten Sie Ihre Frage mit den gelernten statistischen Tools Bereiten Sie die Ergebnisse in Form einer Visualisierung auf Stellen Sie die Ergebnisse in einer Kurzpräsentation in Ihrer Gruppe vor (\u0026lt; 5 Minuten)    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/anaconda/",
	"title": "Conda und Anaconda",
	"tags": [],
	"description": "",
	"content": "Conda ist eine freie und offene Softwarepaketverwaltung für Python. Neben der Möglichkeit, Pakete (packages, libraries) für Python aus dem Internet zu installieren, können mit conda virtuelle Umgebungen (environments) angelegt werden. Diese Umgebungen beinhalten nur die Pakete und Python Versionen, die für ein spezifisches Projekt gebraucht werden. Umgebungen können mit anderen Personen geteilt werden, sodass sichergestellt ist, dass alle Programmierer mit den gleichen Paketen und Versionen arbeiten, auch wenn sie unterschiedliche Systeme (Windows, Linux, MacOS) verwenden.\nAnaconda basiert auf conda. Mit Anaconda werden eine Vielzahl von Paketen, die für die Datenanalyse gebraucht werden, schon vorinstalliert. Außerdem bietet Anaconda eine vorinstallierte Entwicklungsumgebung (Spyder IDE) und eine vorinstallierte Version von Jupyter, mit der Notebooks gestartet werden können.\n Informieren Sie sich über die Unterschiede von Anaconda und Miniconda! Wenn noch nicht geschehen, können Sie Anaconda hier für Ihr Betriebssystem herunterladen. Wir verwenden die Version für Python 3.7. Öffnen Sie den mit Anaconda installierten Anaconda Navigator und verschaffen Sie sich einen Überblick über die vorhandenen Programme.    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/notebooks/",
	"title": "Jupyter Notebooks",
	"tags": [],
	"description": "",
	"content": "Die Projekt-Aufgaben und Code-Beispiele in diesem Modul werden über Jupyter Notebooks erstellt und verteilt.\nJupyter Notebooks bieten eine browserbasierte graphische Schnittstelle zur Python Programmierumgebung. Deswegen können Notebooks auf jedem System gestartet werden, man benötigt dazu nur einen Web-Browser und eine lokale installierte Version von Python.\nDarüber hinaus bieten Notebooks die Möglichkeit Text, Visualisierungen und Code in einer integrierten Datei zu erstellen. Somit können einfach statistische Reports und Analysen erstellt werden. Die Replizierbarkeit der Ergebnisse ist auch gewährleistet, da jede Person, die Programmierschritte im Notebook auf dem eignen Rechner wiederholen kann.\nJupyter Notebook enthält einen Dateimanager mit dem Sie durch die Ordner und Dateien Ihres Systems navigieren können. Mit einem Klick auf eine Notebook-Datei öffnet sich ein neues Browser-Tab mit dem Notebook. Notebooks bestehen immer aus Text/ Markdown oder Code Zellen (cells). Der Python Code in den Zellen kann ausgeführt werden und das Ergebnis wird direkt im Notebook angezeigt.\n Laden Sie dieses Notebook herunter (Rechtsklick -\u0026gt; Ziel/Link speichern unter\u0026hellip;) Starten Sie Jupyter Notebook über die Kommandozeile oder über den Anaconda Navigator Navigieren Sie zu dem Speicherort des Notebooks und öffnen Sie es. Markieren Sie die Code-Zelle und führen Sie sie mit einem Klick auf den Run Button oder mit der Tastenkombination Strg+Enter aus Versuchen Sie, die Farbe der Punkte im Plot von Grün auf Rot zu ändern Fügen Sie das Datum und Ihren Namen der Text-Zelle hinzu     Notebook-Dateien erkennen Sie immer an der Dateiendung .ipynb. Diese Dateien können Sie in Jupyter mit dem integrierten Dateimanager öffnen. Jupyter starten Sie entweder über den Anaconda Navigator oder indem Sie den folgenden Befehl in Ihrer Kommandozeile ausführen (Die Kommandozeile danach nicht wieder schließen!):  jupyter notebook  Rufen Sie http://localhost:8890 in Ihrem Browser auf, um zur Oberfläche von Jupyter zu gelangen.      Jupyter Notebook   tutorial_jupyter.ipynb  (21 ko)    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/dataset/",
	"title": "San Francisco Library Usage",
	"tags": [],
	"description": "",
	"content": "Im ersten Teil des Moduls werden Sie einen offenen Kundendatensatz der Bibliothek in San Francisco analysieren.\n The Integrated Library System (ILS) is composed of bibliographic records including inventoried items, and patron records including circulation data. The data is used in the daily operation of the library, including circulation, online public catalog, cataloging, acquisitions, collection development, processing, and serials control. This dataset represents the usage of inventoried items by patrons \u0026hellip; (Abstract taken from here)\n  Besuchen Sie das offene Daten-Portal der Stadt San Francisco und informieren Sie sich über den Datensatz Erstellen Sie einen Ordner auf Ihrem Computer. Dieser Ordner wird Ihr Projektordner für dieses Modul. Dort legen Sie alle Datensätze und Jupyter Notebooks ab. Erstellen Sie einen Unterordner ./data/ und einen Unterordner ./notebooks/ innerhalb Ihres Projektordners. Laden Sie den Datensatz Library_Usage.csv aus dem Internet herunter und speichern Sie ihn im Projektordner im Unter-Ordner ./data/ ab. Stellen Sie sicher, dass Ihr Projektordner die folgende Verzeichnisstruktur aufweist:  data-librarian-3 ├── data │ └── Library_Usage.csv ├── notebooks │ └── tutorial_jupyter.ipynb    In dieser Excel Tabelle finden Sie eine detallierte Erklärung der einzelnen Variablen des Datensatzes.\n    books by 1 brian is licesed under CC BY-NC-SA 2.0\n  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/packages/",
	"title": "Python Pakete und Bibliothekten",
	"tags": [],
	"description": "",
	"content": "Die folgende Liste gibt einen kurzen Überblick über die wichtigsten Python Bibliotheken, von denen Sie manche im Modul näher kennenlernen werden.\nIm ersten Teil des Modules werden wir mit pandas und seaborn arbeiten.\n numpy  Effizientes Handling und Bearbeitung von numerischen Arrays.\n pandas  Bearbeitung, Transformation, Aggregation und Zusammenfassung von Datensätzen. Baut auf numpy auf.\n matplotlib  Bietet 2D Plotting Funktionalitäten.\n seaborn  Verbesserung und Weiterentwicklung der matplotlib Bibliothek.\n scipy  Funktionen und Methoden aus der Statistik.\n scitkit-learn  Bietet Funktionen und Methoden für maschinelles Lernen.\n "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/quiz_intro/",
	"title": "Recap: Quiz",
	"tags": [],
	"description": "",
	"content": " .quiz fieldset { border-color: black; border-width: 10px; margin-bottom: 1em; } .quiz legend { font-size: 105%; font-weight: 600; padding-left: 15px; padding-right: 15px; padding-top: 15px; } .quiz label { display: block; line-height: 1.75em; } .quiz input[type=\"radio\"] { margin-right: 10px; page-break-after: avoid; page-break-before: avoid; } .quiz input[type=\"submit\"] { background: black; color: white; display: block; font-size: 120%; font-weight: 600; height: 2.5em; margin-top: 2em; text-transform: uppercase; width: 100%; } .quiz table { color: white; font-weight: bold; margin: 1em auto 2em auto; width: 100%; } .quiz td { padding: 5px 15px; text-align: left; width: 60px; } .quiz td.missing-label, .quiz td.missing-score { background: #CECBC2; } .quiz td.right-label, .quiz td.right-score { background: #74b559; } .quiz td.wrong-label, .quiz td.wrong-score { background: #D01F3C; }    var choices = \"Strg+R,Enter,Strg+Enter\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Mit welcher Tastenkombination können sie Zellen in Jupyter Notebooks ausführen?\"; var answer = 3 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"weniger als 200,200-400,401-600,mehr als 600\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Wie viele Pakete sind in Anaconda unter der Linux-Python 3.7 Version schon vorinstalliert?\"; var answer = 4 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"423448,423000,15,2103\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Wie viele Zeilen enthält der San Francisco Library Usage Datensatz?\"; var answer = 1 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"das Paket wird importiert,dem Paket wird der kürzere Name sns zugewiesen,das Standard Design von matplotlib wird angepasst\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Was macht die Funktion sns.set() aus dem seaborn package?\"; var answer = 3 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var quiz = new Quiz(\"vorbereitung_quiz\", questions, {\"shuffle\": true});   "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/ml/",
	"title": "Statistik, Data Science und Machine Learning",
	"tags": [],
	"description": "",
	"content": "Seit einigen Jahren sind Data Science und Machine Learning zu alltäglichen Begriffen geworden. Studiengänge im Bereich Data Science werden neu eingerichtet oder schon bestehende Abschlüsse umbenannt. Maschinelles Lernen und insbesondere Themen wie künstliche Intelligenz, Neuronale Netze und Deep Learning sind Thema in Zeitungen und Nachrichten. Und auch der Zertifikationskurs Data Librarian spiegelt diese Entwicklung wieder.\n Was bedeuten diese Begriffe und wo ist dabei die Statistik einzuordnen?\n Im folgenden wird ein kurzer Überblick über die Begriffe gegeben. Für Interessierte gibt es Verweise zu weiteren Quellen.\n"
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/basic_terms/",
	"title": "Grundbegriffe der Statistik",
	"tags": [],
	"description": "",
	"content": "In der Kursumgebung finden Sie das Einführungskapitel des Buchs Statistik: Der Weg zur Datenanalyse zum alleinigen persönlichen Gebrauch hier im Kurs hinterlegt.1\nDer Text gibt einen Einstieg in die Aufgaben und Anwendungsbereiche der Statistik und erklärt die grundlegenden Begriffe, mit denen Daten und Datensätze charakterisiert werden können.\nBeantworten und diskutieren Sie folgende Fragen konkret für den San Francisco Library Usage Datensatz. Halten Sie Ihre Ergebnisse in Stichpunkten in einem Jupyter Notebook fest.\n Wie viele Merkmale besitzt der Datensatz? Wie groß ist die Stichprobengröße des Datensatzes? Wer oder was sind die Merkmalsträger? Von wann bis wann wurden die Daten erhoben? Wie lässt sich die Grundgesamtheit beschreiben? Handelt es sich um eine Vollerhebung? Welche Merkmale sind stetig? Welche diskret? Welchem Skalenniveau entsprechen die einzelnen Merkmale (Nominal-, Ordinal- oder Kardinalskala/ metrisch)? Enthält der Datensatz fehlende Werte? Handelt es sich um Querschnitts-, Längsschnitss- oder Paneldaten?      Fahrmeir, Ludwig, Christian Heumann, Rita Künstler, Iris Pigeot, and Gerhard Tutz. Statistik: Der Weg zur Datenanalyse. Springer-Verlag, 2016, https://www.springer.com/de/book/9783662503713. \u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/univariate/",
	"title": "Univariate Verteilungen",
	"tags": [],
	"description": "",
	"content": "In der Statistik geben Verteilungen an, wie wahrscheinlich oder häufig eine bestimmte Merkmausausprägung oder Kombination von Merkmausausprägungen ist. Univariate Verteilung beschreiben dabei die Wahrscheinlichkeiten einer einzelnen statischen Variablen, während bivariate oder multivariate Verteilungen sich auf zwei oder mehr Variablen beziehen.\nEmpirische Verteilungen beziehen sich dabei auf die Häufigkeiten in konkreten Daten während theoretische Verteilungen als mathematischen Funktionen, die von einigen wenigen Parametern abhängen, vorliegen. Eine Hauptaufgabe der schließenden Statistik ist es, die beobachtbaren Daten so zu nutzen, dass die Parameter von theoretischen Verteilungen korrekt geschätzt werden können.\nStatistiken, wie der Mittelwert oder der Modus dienen zur Beschreibungen und Charakterisierung von Verteilungen in einigen wenigen Kennzahlen. Dabei gibt es häufig Statistiken, die nur für bestimmte Skalenniveaus Sinn machen.\nKategoriale (nominale und ordinale) Variablen werden in Häufigkeitstabellen zusammengefasst. Wichtige charakteristische Eigenschaften für metrische Variablen sind die zentrale Lage, die Streuung und die Symmetrie.\nIm Folgenden werden mit $x = x_1, \\dots, x_n$ eine univariate Reihe von Beobachtungen beschrieben, mit $n$ die Anzahl der Beobachtungen. $x_i$ beschreibt die Beobachtung an der i-ten Stelle.\n  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/univariate/mean/",
	"title": "Lagemaße",
	"tags": [],
	"description": "",
	"content": "Für metrische Variablen beschreiben Lagemaße die Zentralität einer Verteilung. Das bekannteste Lagemaß ist der empirische Mittelwert:\n$$ \\bar{x} = \\frac{1}{n}\\sum_{i=1}^{n}x_i = \\frac{x_1 + x_2 + \\dots + x_n}{n} $$\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df[\u0026#39;Total Checkouts\u0026#39;].mean()    Eine zweite wichtige Statistik ist der Median. Er ergibt sich aus dem Wert der Beobachtung, die die nach der Größe geordnete Messreihe in genau zwei gleich große Teile teilt. Für eine gerade Anzahl an Beobachtung wird der Mittelwert der Beobachtung an der Stelle $n/2$ und $n/2+1$ genommen:\n$$ x_{0.5} = \\begin{cases} x_{(n+1)/2}, \\text{n ungerade} \\\\\n\\frac{x_{n/2} + x_{n/2+1}}{2}, \\text{n gerade} \\end{cases} $$ für $x_1 \u0026lt; x_2 \u0026lt; \\dots \u0026lt; x_n$.\nBeispiel: Für $x=[8, 10, 11, 30]$ ist der Median $\\frac{x_2 + x_3}{2} = 10.5$.\ndf[\u0026#39;Total Checkouts\u0026#39;].median()     Schauen Sie sich den Mittelwert und den Median der Variable Total Checkouts an. Warum sind die beiden Werte so unterschiedlich? Was ziehen Sie daraus für Schlüsse für weitere statistische Analysen und Reports?    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/univariate/variance/",
	"title": "Streuungsmaße",
	"tags": [],
	"description": "",
	"content": "Streuungsmaße geben an, wie stark die Daten einer Messreihe schwanken.\nDie Abweichung einer Beobachtung von dem Mittelwert der zugrundeliegenden Variable wird Abweichung genannt. Der Mittelwert über die quadrierten Abweichungen nennt man Varianz:\n$$ s^2_x = \\frac{1}{n-1}\\sum_{i=1}^{n}(x_i-\\bar{x})^2 $$\ndf[\u0026#39;Total Checkouts\u0026#39;].var()    Das Quadrieren der Abweichungen hat zur Folge, dass das Vorzeichen verschwindet und das große Abweichungen mehr Gewicht erhalten.\nIn der Formel wird durch $n-1$ anstatt durch $n$ geteilt. Dies ist theoretisch von Bedeutung, es hat aber in der Praxis meist keine Auswirkungen, wenn durch $n$ geteilt wird.\nDie Standardabweichungen ist die Wurzel der Varianz:\n$$ s_x = \\sqrt{s_x^2} $$\ndf[\u0026#39;Total Checkouts\u0026#39;].std()    Die Spannweite ist die Differenz zwischen dem maximalen und minmalem Wert\ndf[\u0026#39;Total Checkouts\u0026#39;].max() - df[\u0026#39;Total Checkouts\u0026#39;].min()    Quantile Sie haben schon den Median $x_0.5$ als Lageparameter kennengelernt. Er teilt die geordnete Verteilung in zwei genau gleich große Teile. Allgemeiner lassen sich analog dazu die Quantile definieren: $x_{0.75}$ teil die geordnete Verteilung im Verhältnis 3:1. Das heißt, dass 75% der Beobachtungen kleiner als $x_{0.75}$ und 25% größer sind. Das $x_{0.25}$ Quantil teilt die Reihe im Verhältnis 1:3. Hier sind 25% der Beobachtungen kleiner und 75% größer.\ndf[\u0026#39;Total Checkouts\u0026#39;].quantile(q=[0.25, 0.5, 0.75])    Daraus kann der Interquartilsabstand als Streuungsmaß abgeleitet werden: $$ x_{IQR} = x_{0.75} - x_{0.25} $$\ndf[\u0026#39;Total Checkouts\u0026#39;].quantile(q=0.75) - df[\u0026#39;Total Checkouts\u0026#39;].quantile(q=0.25)    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/univariate/symmetrie/",
	"title": "Symmetrie und Schiefe",
	"tags": [],
	"description": "",
	"content": "  Verschiedene univariate Verteilungen     Related files   distributions.ipynb  (83 ko)    Um eine metrische Verteilung charakterisieren zu können, ist neben der zentralen Lage- und Streuung auch deren Symmetrie und Schiefe von Bedeutung.\nDas Bild zeigt Histogramme für verschiedene simulierte Zufallswerte der Beta-Verteilung. Dabei wurden jeweils die Parameter der theoretischen Verteilung $\\alpha$ und $\\beta$ geändert. Somit kann eine große Bandbreite charakteristischer Verteilungen abgedeckt werden. Neben dem Histogram wurde auch der empirische Median und Mittelwert der Verteilung als vertikale Linien eingezeichnet.\nFür symmetrische Verteilungen gilt, dass der Mittelwert und der Median gleich sind und das Histogram an diesen Achsen gespiegelt werden kann. Eine linkssteile (rechtschiefe) Verteilung ergibt sich durch einige überdurchschnittlich große Werte. In diesem Fall ist der Mittelwert größer als der Median. Eine rechtssteile (linksschiefe) Verteilung ist durch einige unterdurchschnittlich kleine Werte geprägt. Hier ist der Median größer als der Mittelwert.\nZudem kann eine Verteilung auch Gleichverteilt, Bi- oder Multimodal sein. Im ersten Fall gibt es keinen Modus, also kein Wert der Verteilung, der am Häufigsten vorkommt. In den letzteren Fällen gibt es ein oder mehrere Modi. Im Histogram sind multimodale Verteilungen daran zu erkennen, dass sie typischerweise über zwei oder mehr \u0026ldquo;Gipfel\u0026rdquo; verfügen.\n Schauen Sie sich die verschiedenen Histogramme im Bild an und charakterisieren Sie jede einzelne Verteilung anhand von Schiefe, Symmetrie und dem Modus Die Graphik wurde mit dem angehängten Jupyter Notebook generiert. Hier können Sie auch selber andere Verteilungen simulieren und visualisieren.     Der Mittelwert und die Standardabweichung basieren auf den absoluten numerischen Werten der Beobachtungen. Deswegen können untypische sehr große oder sehr kleine Werte einer Verteilung (\u0026ldquo;Ausreißer\u0026rdquo;) diese Statistiken nach oben oder unten verzerren. Der Median und der Interquartilsabstand (IQR) hingegen basiert alleine auf der nach Größe sortierten Reihung der Beobachtungen und nicht auf den absoluten Werten. Deswegen sind diese Statistiken robust vor Ausreißern. Bei nicht-symmetrischen Verteilungen oder wenn Ausreißer vorliegen sollten deswegen immer auch robuste Statistiken mit angegeben werden. Ist die Verteilung Bi- oder Multimodal so können die Lagemaße Mittelwert und Median irreführend sein, da sie in der Regel nicht mit den \u0026ldquo;Gipfeln\u0026rdquo; der Verteilung (Modus) übereinstimmen.    Fallstudie: Verteilung der Ausleihen pro Kunde Mit dem folgenden Beispiel können Sie ein Histogram über die Anzahl der Ausleihen im Datensatz erstellen:\nimport pandas as pd import seaborn as sns %matplotlib inline sns.set() df = pd.read_csv(\u0026quot;../data/Library_Usage.csv\u0026quot;) sns.distplot(df['Total Checkouts'], kde=False)    Das Histogram zeigt, dass die Verteilung der Ausleihen durch einige sehr große Ausreißer geprägt ist. Der Mittelwert liegt hier bei $\\bar{x} = 162$, während der Median $x_{0.5} = 19$ sehr viel kleiner ist. Das 95%-Quantil liegt bei $x_{0.95} = 816$ Ausleihen. Das heißt das fast 95% der Beobachtungen im Datensatz weniger als 800 Ausleihen getätigt haben.\n Entfernen Sie die 5% größten Ausreißer aus dem Datensatz, indem Sie diesen nach Personen mit weniger als 800 Ausleihen filtern. Schauen Sie sich die Verteilung des gefilterten Datensatzes an und charakterisieren Sie diese. Verwenden Sie nun wieder den ungefilterten Datensatz und erstellen Sie einer neue Spalte 'Total Checkouts Sqrt' die die Wurzel über die Ausleihen enthält. Die Wurzel können sie mit df['Total Checkouts']**(0.5) berechnen. Schauen Sie sich das Histogram von 'Total Checkouts Sqrt'. Finden Sie, dass die Wurzel-Transformation eine geeignete Methode ist, um mit Ausreißern umzugehen?    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/bivariate/",
	"title": "Bivariate Verteilungen",
	"tags": [],
	"description": "",
	"content": "Bisher haben Sie immer nur einzelne Variable betrachtet, zusammengefasst oder visualisiert. In vielen Fällen ist jedoch der Zusammenhang zwischen zwei Variablen von Interesse:\n Leihen ältere Bibliothekskunden im Schnitt mehr Bücher aus als jüngere? Führen Kunden, die häufiger Ausleihen tätigen, im Schnitt auch häufiger Verlängerungen durch? Nimmt die Anzahl der Ausleihen mit zunehmender Dauer der Mitgliedschaft ab?  Zwei Variablen, die keinen Zusammenhang aufweisen, nennt man auch statistisch unabhängige Variablen. Für zwei metrische Variablen kann man außerdem zwischen einem positiven oder einem negativem Zusammenhang unterscheiden.\n"
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/bivariate/cross_tables/",
	"title": "Kreuztabellen",
	"tags": [],
	"description": "",
	"content": "Um zwei ordinale oder nominale Variablen miteinander zu vergleichen, eignen sich Kreuztabellen. Jeder Wert in der Kreuztabelle entspricht der Anzahl der Beobachtungen im Datensatz mit genau dieser Kombination an Merkmalsausprägungen.\nHier ein Beispiel (mit dem Argument na_values=\u0026quot;none\u0026quot; markiert pandas die \u0026quot;none\u0026quot; Werte in der Spalte 'Notice Preference Definition' als fehlende Werte):\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;, na_values=\u0026#34;none\u0026#34;) pd.crosstab( df[\u0026#39;Provided Email Address\u0026#39;], df[\u0026#39;Notice Preference Definition\u0026#39;], margins=True )       Notice Preference email phone print all     Provided Email Address       False 95 58362 28569 87026   True 323842 9810 2767 336419   All 323937 68172 31336 423445    Eine Kreuztabelle mit absoluten Werten ist häufig schwer zu interpretieren. Deswegen sollten die Werte entweder Spaltenweise oder Zeilenweise normalisiert werden:\npd.crosstab( df[\u0026#39;Provided Email Address\u0026#39;], df[\u0026#39;Notice Preference Definition\u0026#39;], margins=True, normalize=1 )    Ergibt eine Normalisierung der Spalten, sodass sich diese jeweils zu 100% aufaddieren:\n   Notice Preference email phone print all     Provided Email Address       False 0.000293 0.856099 0.911699 0.205519   True 0.999707 0.143901 0.088301 0.794481     Von den Kunden, die per Mail informiert werden möchten, haben 99.97% eine Mail Adresse angegeben. Nur 8.83% der Kunden die per Telefon informiert werden möchten, haben eine Mail Adresse angegeben.\n Wird das Argument normalize=0 verwendet, so werden die Zeilen der Tabelle normalisiert. Entsprecht ändern sich die Interpretation:\n Von den Kunden, die eine Mail angeben haben, möchten 96% per Mail informiert werden. Von den Kunden, die keine Mail angegeben haben, möchten 67% per Telefon informiert werden.\n Kreuztabellen lassen sich als groupierte Balkendiagramme visualisieren:\nimport pandas as pd import seaborn as sns sns.set() %matplotlib inline df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;, na_values=[\u0026#34;none\u0026#34;]) pd.crosstab( df[\u0026#39;Provided Email Address\u0026#39;], df[\u0026#39;Notice Preference Definition\u0026#39;], margins=False, normalize=0 ).plot.bar()    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/bivariate/correlation/",
	"title": "Korrelation",
	"tags": [],
	"description": "",
	"content": "Der Korrelationskoeffizient $\\rho_{x, y}$ misst für zwei metrische Variablen $x$ und $y$ die Stärke des linearen Zusammenhangs. Der Koeffizient kann zwischen $-1$ (negativer Zusammenhang) und $1$ (positiver Zusammenhang) variieren:\n   Der Korrelationskoeffizient ist definiert als: $$ \\rho_{x, y} = \\frac{s_{x, y}^2}{s_xs_y} = \\frac{\\sum_{i=1}^{N}(x_i-\\bar{x})(y_i-\\bar{y})}{\\sqrt{\\sum_{i=1}^{N}(x_i-\\bar{x})^2\\sum_{i=1}^{N}(y_i-\\bar{y})^2}} $$\nDie Ausdrücke im Nenner sind die jeweiligen Standardabweichungen der Reihen. Sie dienen zur Normalisierung der Statistik, sodass diese nur Werte zwischen $-1$ und $1$ annimmt.\nIm Zähler steht die empirische Kovarianz definiert als: $$ s_{x, y}^2 = \\frac{1}{N}\\sum_{i=1}^{N}(x_i-\\bar{x})(y_i-\\bar{y}) $$\nNehmen Sie vereinfachend an, dass $\\bar{x} = \\bar{y} = 0$. Die Kovarianz ist dann der Mittelwert über die paarweise miteinander multiplizierten Beobachtungen. Sind beide Faktoren positiv oder beide Faktoren negativ, so tragen diese zu einer positiven Kovarianz bei. Haben die Faktoren unterschiedliche Vorzeichen, so tragen diese zu einer negativen Kovarianz bei. Kleine numerische Werte tragen nur wenig zur Kovarianz bei.\n Mit pandas können Sie auch Korrelationen ausrechnen: import pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df[\u0026#39;Total Checkouts\u0026#39;].corr(df[\u0026#39;Total Renewals\u0026#39;])       Beispiel für Scheinkorrelation in Zeitreihen ($\\rho_{x,y}=0.99$): Große positive oder negative Korrelationen sind kein Indiz für kausale Zusammenhänge! Quelle: tylervigen.com\n  Anscombe-Quartett Das Anscombe Quartett ist ein Datenstatz, der aus 4 bivariaten Verteilungen besteht. Über die Spaltennamen ['x1', 'y1'], ['x2', 'y2'], ..., ['x4', 'y4'] können die zusammengehörenden Datenpaare ausgewählt werden.\n Lesen Sie diesen Datensatz ein. Berechnen Sie den Mittelwert, Median und die Standardabweichung der Spalten Berechnen Sie jeweils die Korrelation zweier zusammenhängender Spalten [x\u0026lt;i\u0026gt;, y\u0026lt;i\u0026gt;] Erstellen Sie jeweils ein Streudiagram zweier zusammenhängender Spalten [x\u0026lt;i\u0026gt;, y\u0026lt;i\u0026gt;] Was fällt Ihnen auf? Informieren Sie sich über den Datensatz hier.      Related files   anscombe.csv  (0 ko)   anscombe.ipynb  (37 ko)   correlation.ipynb  (168 ko)    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/pandas/",
	"title": "Praktische Einführung in Pandas",
	"tags": [],
	"description": "",
	"content": "Grundlage der statistischen Analyse sind Datentabellen: Jede Zeile der Tabelle entspricht einer Beobachtung. Jede Spalte entspricht einer statistischen Variable. Neue Beobachtungen und Variablen können dadurch einfach an die schon bestehende Tabelle angefügt werden.\nAchten Sie darauf, dass wenn es um Statistik und Programmierung geht mit \u0026ldquo;Variable\u0026rdquo; zwei Dinge gemeint sind:\n Variable im Kontext eines statistischen Merkmals, das in der Regel als Spalte eines Datensatzes vorliegt. Variablen im Kontext von Programmiersprachen beschreiben benannte Referenzen auf bestimmte Datenstrukturen oder Objekte (z.B. numbers = [1, 2, 3]).    Am Beginn jeder statistischen Analyse steht die Aufbereitung und Bereinigung der Daten. Damit ist die Behandlung von fehlenden oder falsch kodierten Werten, die Umkodierung und Transformation von statistischen Variablen oder die Berechnung neuer Spalten gemeint. Oft sind auch nur Untergruppen von Beobachtungen mit bestimmten Merkmausausprägungen von Interesse.\nViele statistische Methoden erfordern auch, dass die Daten nur als numerische Werte vorliegen. Daher müssen ordinale oder nominale Variablen, die als Text gespeichert sind (zum Beispiel ['male', 'female', 'female', ...]) in entsprechende numerische Werte umkodiert werden. Dabei wird jeder Kategorie ein numerischer Wert zugeordnet.\nDas Standard-Paket um mit Datentabellen in Python zu arbeiten, ist pandas. Das folgende Kapitel stellt anhand von vielen praktischen Beispielen zum Nachmachen die grundlegenden Konzepte in pandas vor. Ein Überblick über die Bibliothek und weitere relevante Python-Pakete gibt es hier.\n Laden Sie sich dieses Jupyter Notebook herunter   Speichern Sie das Notebook in Ihrem Projektordner unter ./notebooks ab. Führen Sie die Beispiele im Notebook aus, während Sie die folgende Kurseinheit durcharbeiten.    Ihre Verzeichnisstruktur vom Projektordner sollte jetzt so aussehen:\ndata-librarian-3 ├── data │ └── Library_Usage.csv ├── notebooks │ ├── pandas_introduction.ipynb │ └── tutorial_jupyter.ipynb    What is Pandas? Introduction Video by Giles McMullen ( Untertitel auswählbar)   Weitere Ressourcen  Python Data Analaysis Tutorials Interaktive Python Online-Tutorials auf learnpython.org Einführung in Python auf kaggle Pandas Tutorial auf kaagle Pandas Cheat Sheet  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/reflection/",
	"title": "Reflexion: Daten an Ihrem Arbeitsplatz",
	"tags": [],
	"description": "",
	"content": " Schreiben Sie einen kurzen Text über die Verwendung von Daten und quantitativen Methoden an Ihrem Arbeitsplatz. Denken Sie dabei über folgende Fragen nach:\n Welche Daten sind bei Ihnen vorhanden? Mit welchen Daten arbeiten Sie oder würden Sie gerne arbeiten? Werden statistische Verfahren oder Maschinelles Lernen schon bei Ihnen eingesetzt? Welche Fragen oder Phänomene würden Sie gerne untersuchen? Was fänden Sie spannend herauszufinden?  Teilen Sie Ihren Text mit den anderen KursteilnehmerInnen auf der Kursplattform. Wenn Sie für die Anderen anonym bleiben möchten, können Sie mir auch den Text schicken und ich lade ihn dann hoch.\n  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/visualizations/",
	"title": "Visualisierungen mit Seaborn",
	"tags": [],
	"description": "",
	"content": "    Im folgenden Abschnitt, wird ein Überblick über verschiedene Visualisierungsformen gegeben und anhand von Beispielen gezeigt, wie diese in Python mit der Bibliothek seaborn programmiert werden können.\nDas Thema Visualisierungen ist komplex: Es gibt sehr viele Parameter und Stellschrauben, die man auswendig lernen oder in den Dokumentationen der Bibliotheken pandas, seaborn und matplotlib Nachschlagen muss. Die Erstellung von eindrucksvollen und aussagekräftigen Graphiken erfordert viel Praxiserfahrung, Zeit und Mühe.\nAuf der anderen Seite lassen sich schon mit wenig Programmcode annehmbare Visualisierungen erstellen. Am besten orientieren Sie sich an den zahlreiche Beispielen und ändern den Code Ihren Erfordernissen an.\n Statistik bei FoxNews  Was fällt Ihnen an den folgenden Diagrammen von FoxNews auf? Was würden Sie anders machen? Welche Botschaft wollen die \u0026ldquo;Designer\u0026rdquo; vermitteln? Passt die Botschaft mit den Daten zusammen? (s. auch Quelle und Hintergründe, s. auch dieses Beispiel)    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/visualizations/tutorial/",
	"title": "Tutorial",
	"tags": [],
	"description": "",
	"content": " Statistical analysis is a process of understanding how variables in a dataset relate to each other and how those relationships depend on other variables. Visualization can be a core component of this process because, when data are visualized properly, the human visual system can see trends and patterns that indicate a relationship. (https://seaborn.pydata.org/tutorial/relational.html)\n Die zahlreichen Funktionen, die seaborn bietet basieren immer auf dem gleichen Prinzip: Visualisiert werden (nominale, ordinale, metrische) Variablen eines Datensatzes, die in Form eines DataFrames vorliegt. Das Skalenniveau der Variablen bestimmt dabei die Art der Visualisierung. Variablen können verschiedenen Eigenschaften des Diagramms zugeordnet werden z.B. Punktgröße oder Farbe). Am besten lässt sich das Prinzip an einem Beispiel erkennen:\nimport pandas as pd import seaborn as sns # command to print plots directly in jupyter %matplotlib inline sns.set() # sets the default seaborn theme # use sample to generate a random subsample df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;).sample(n=1000) sns.scatterplot(x=\u0026#39;Total Checkouts\u0026#39;, y=\u0026#39;Total Renewals\u0026#39;, data=df)    Dies erzeugt ein Streudiagram zur Visualisierung einer bivariaten Verteilung mit metrischen Variablen. Jedes Wertepaar $(x_i,y_i)$ der Verteilung wird im Koordinatensystem als Punkt dargestellt.\nMit dem zusätzlichen Befegl\n"
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/visualizations/examples/",
	"title": "Beispiele",
	"tags": [],
	"description": "",
	"content": "   Related files   examples.ipynb  (184 ko)    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/quiz_pandas/",
	"title": "Quiz: Pandas-Bibliothek",
	"tags": [],
	"description": "",
	"content": " .quiz fieldset { border-color: black; border-width: 10px; margin-bottom: 1em; } .quiz legend { font-size: 105%; font-weight: 600; padding-left: 15px; padding-right: 15px; padding-top: 15px; } .quiz label { display: block; line-height: 1.75em; } .quiz input[type=\"radio\"] { margin-right: 10px; page-break-after: avoid; page-break-before: avoid; } .quiz input[type=\"submit\"] { background: black; color: white; display: block; font-size: 120%; font-weight: 600; height: 2.5em; margin-top: 2em; text-transform: uppercase; width: 100%; } .quiz table { color: white; font-weight: bold; margin: 1em auto 2em auto; width: 100%; } .quiz td { padding: 5px 15px; text-align: left; width: 60px; } .quiz td.missing-label, .quiz td.missing-score { background: #CECBC2; } .quiz td.right-label, .quiz td.right-score { background: #74b559; } .quiz td.wrong-label, .quiz td.wrong-score { background: #D01F3C; }    var choices = \"read_excel,to_excel,load_excel,from_excel\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie lautet der Name der Pandas Funktion, mit der Excel-Dateien eingelesen werden können?\"; var answer = 1 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"df.rows,len(df),df.shape[1],df.size\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Mit welchem Befehl kann die Anzahl der Zeilen aus einem DataFrame auslesen?\"; var answer = 2 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"40,423448,0,215\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie viele fehlende Werte enthält die \\x27Age Range\\x27 Variable des Datensatzes?\"; var answer = 4 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"263544,7797,159904,12003\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie viele Beobachtungen zwischen 60 und 64 Jahren waren im Jahr 2016 aktive Kunden oder Kundinnen der Bibliothek?\"; var answer = 2 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var quiz = new Quiz(\"pandas_quiz\", questions, {\"shuffle\": true});   "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/quiz_statistics/",
	"title": "Quiz: Deskriptive Statistik",
	"tags": [],
	"description": "",
	"content": " .quiz fieldset { border-color: black; border-width: 10px; margin-bottom: 1em; } .quiz legend { font-size: 105%; font-weight: 600; padding-left: 15px; padding-right: 15px; padding-top: 15px; } .quiz label { display: block; line-height: 1.75em; } .quiz input[type=\"radio\"] { margin-right: 10px; page-break-after: avoid; page-break-before: avoid; } .quiz input[type=\"submit\"] { background: black; color: white; display: block; font-size: 120%; font-weight: 600; height: 2.5em; margin-top: 2em; text-transform: uppercase; width: 100%; } .quiz table { color: white; font-weight: bold; margin: 1em auto 2em auto; width: 100%; } .quiz td { padding: 5px 15px; text-align: left; width: 60px; } .quiz td.missing-label, .quiz td.missing-score { background: #CECBC2; } .quiz td.right-label, .quiz td.right-score { background: #74b559; } .quiz td.wrong-label, .quiz td.wrong-score { background: #D01F3C; }    var choices = \"rechtsschief,linkschief,rechtssteil,symmetrisch\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wenn der Median einer Verteilung kleiner als das Arithmetische Mittel ist, dann ist die Verteilung in der Regel...\"; var answer = 1 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"71,609,23,2\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie viel Prozent der unter 10 Jährigen hat eine Email Adresse angeben?\"; var answer = 1 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"0.60,9.0,36.0,6.0\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie lautet das 60% Quantil der Spalte \\x27Total Checkouts\\x27?\"; var answer = 3 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"'25 to 34 years',91083,423233,'75 years and over'\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Was ist der Modalwert der Spalte \\x27Age Range\\x27?\"; var answer = 1 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var quiz = new Quiz(\"pandas_quiz\", questions, {\"shuffle\": true});   "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/packages/pandas/",
	"title": "pandas",
	"tags": [],
	"description": "Bearbeitung, Transformation, Aggregation und Zusammenfassung von Datensätzen. Baut auf numpy auf.",
	"content": "pandas baut auf numpy auf und vereinfacht stark die Bearbeitung, Transformation, Aggregation und Zusammenfassung von zweidimensionalen Datensätzen sowie deren Import und Export in Python. Die zentralen Datenstrukturen in pandas sind Series und DataFrame.\nSeries sind eindimensionale Listen eines Datentypes, ähnlich wie arrays in numpy. Datentypen können ganzzahlige Zahlen (int), binäre Werte vom Typ true oder false (bool), Strings (str) oder reale Zahlen (float) sein.\nIn einem DataFrame werden mehrere Series gleicher Länge spaltenweise zu einer zweidimensionalen Tabelle (wie einer Excel Tabelle) zusammengefasst. Ein DataFrame besitzt außerdem auch immer Spalten- und Zeilennamen.\nWie auch numpy, bietet pandas darüber hinaus viele Funktionen aus der Statistik, zum Beschreiben von Daten. Eine Übersicht gibt es hier.\n# import the library and give it a shorter name \u0026#39;pd\u0026#39; import pandas as pd # create a dataframe by hand with two columns and three rows df = pd.DataFrame({ \u0026#39;month\u0026#39;: [1, 2, 3], \u0026#39;temperatur\u0026#39;: [-12, 3, 9] }) # print out some descriptive statistics df.describe()     Kopieren Sie das Codebeispiel in ein Jupyter Notebook und führen Sie es aus. Fügen Sie weitere Temperatur und Monats-Werte dem DataFrame hinzu. Welche Statistiken liefert ein Aufruf der Funktion describe()?    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/inference/overview/",
	"title": "Überblick",
	"tags": [],
	"description": "",
	"content": "Bisher haben Sie vorliegende Daten einer Stichprobe mit Visualisierungen und Statistiken beschrieben und zusammengefasst. Von Interesse sind aber in der Regel, die Zusammenhänge und Statistiken in der Gesamtpopulation.\nBeispiel Wahlumfrage: Sie ziehen zufällig $n=100$ Personen aus dem Wahlregister und befragen Sie nach ihren Parteipräferenzen. Sie können dann beispielsweise den relativen Anteil der Personen in Ihrer Stichprobe, die eine bestimmte Partei favorisieren, bestimmen. Damit haben Sie einen Schätzwert für den tatsächlichen Wert, wenn Sie alle Personen des Wahlregisters befragt hätten.\nZiehen Sie eine weitere Stichprobe, so werden die neuen Schätzwerte nicht genau mit denen aus der vorherigen Stichprobe übereinstimmen. Wollen Sie deswegen eine Aussage über die tatsächlichen Anteile in der Gesamtpopulation treffen, so ist diese immer mit Unsicherheit behaftet.\nDer Mittelwert/ relative Anteil ändert sich mit jeder Stichprobe, die Sie ziehen. Damit sind diese Schätzwerte für sich gesehen statistische Variablen, die einer statistischen Verteilung folgen und die deskriptiv beschrieben werden können.\nWie können Sie von Mittelwerten einer Stichprobe auf den \u0026ldquo;wahren\u0026rdquo; Wert in der Gesamtpopulation schließen? Wie können Sie die Unsicherheiten, die dabei auftreten quantifizieren? Mit diesen Fragen beschäftigt sich die Inferenzstatistik.\nDer Stichprobenfehler gibt an, wie stark ein Schätzwert (z.B. Relativer Anteil Personen mit Präferenz für Partei A) von Stichprobe zu Stichprobe schwankt. Damit wird also die Varianz eines Schätzers angegeben. Die theoretische Bestimmung des Stichprobenfehlers ist eine der Hauptaufgaben der Inferenzstatistik.\nIn der Realität ziehen Sie nur eine Stichprobe und berechnen daraus einzelne Schätzer. Wie können Sie von dieser einzelnen Stichprobe auf die Varianz des Schätzers schließen?\nDer Zentrale Grenzwertsatz ist eine der Hauptaussagen der Inferenzstatistik. Aus ihm kann abgeleitet werden, dass der Mittelwert einer Variable aus einer ausreichend großen Stichprobe einer ganz bestimmten theoretischen Verteilung folgt. Diese Verteilung wird Normalverteilung genannt. Solange, die Stichprobe groß genug ist, spielt dabei die Verteilung der zugrundeliegenden Variablen keine Rolle; der Mittelwert folgt einer Normalverteilung!\nDie Normalverteilung wird durch eine mathematische Funktion beschrieben. Mit ihr kann man beispielsweise berechnen: Wie wahrscheinlich ist es, dass der Mittelwert einer Stichprobe größer als $10$ ist.\nBias beschreibt eine systematische Verzerrung des Schätzwertes vom wahren Wert, der geschätzt werden soll. Dies kann aufgrund von falschen Berechnungen des Schätzers oder häufiger, aufgrund von schlechten Stichproben passieren.\nWerden beispielsweise nur Personen in Großstädten nach ihren Wahlpräferenzen befrat, so sind die daraus gewonnen Daten nur sehr schlechte Schätzwerte für die wahren Werte der Gesamtpopulation, da bestimmte Präferenzen systematisch über- oder unterschätzt werden.\n    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/inference/example/",
	"title": "Beispiel: Würfelwurf",
	"tags": [],
	"description": "",
	"content": "Das würfeln eines Würfels ist ein Zufallsprozess, mit den Ereignissen $\\{1, 2, 3, 4, 5, 6\\}$. Wenn $X$ das Ergebnis eines einzelnen Würfelwurfs beschreibt dann kann die Wahrscheinlichkeit, dass der Würfelwurf Eins ergibt mit $P(X = 1)$ geschrieben werden. Ist der würfel fair und würfeln wir diesen nun viele hunderttausende Mal, so wird der relative Anteil der Einserwürfe $P(X=1) = \\frac{1}{6}$ ergeben.\nWahrscheinlichkeiten nehmen immer Werte zwischen Null und Eins an und können deswegen auch als Prozente zwischen $0%$ und $100%$ angegeben werden.\nJe mehr Beobachtungen gesammelt werden, desto genauer können Aussagen über die Wahrscheinlichkeiten von Zufallsexperimenten getroffen werden. Würfeln wir beispielsweise nur $n=10$ mal und berechnen die relative Anteile, so werden die Ergebnisse noch stark schwanken. Je öfter aber das Experiment wiederholt wird, desto näher wird der gemessene relative Anteil an den wahren Wert $\\frac{1}{6}$ sein.\n  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/packages/matplotlib/",
	"title": "matplotlib",
	"tags": [],
	"description": "Bietet 2D Plotting Funktionalitäten.",
	"content": "matplotlib ist das Standard-Paket zum Erstellen von wissenschaftlichen 2-dimensionalen statischen Graphiken. Die grundlegende Struktur in matplotlib ist figure, eine leere graphische Fläche, die mit Linien, Balken, Punten, Beschriftungen und Axen befüllt werden kann. Der fertige Plot kann dann in diversen Formaten abgespeichert oder auf dem Bildschirm angezeigt werden.\n# import the package and give it the shorter name \u0026#39;plt\u0026#39; # matplotlib inline import matplotlib.pyplot as plt # create some dummy data x = range(1, 10) # make a simple scatter plot of the data plt.plot(x, x, c=\u0026#34;green\u0026#34;, linestyle=\u0026#39;\u0026#39;, marker=\u0026#39;+\u0026#39;)     Kopieren Sie den Code in ein Jupyter Notebook. Ändern Sie die Farbe der Pukte im Plot von grün auf schwarz. Ändern Sie den Aufruf so um, dass statt Punkte, Linien angezeigt werden. Hier finden Sie die Dokumentation der Funktion matplotlib.pyplot.plot.    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/inference/ttest/",
	"title": "Mittelwertvergleiche",
	"tags": [],
	"description": "",
	"content": "In der Praxis, werden Häufig zwei Mittelwerte von Untergruppen einer Variable darauf getestet,\n"
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/packages/seaborn/",
	"title": "seaborn",
	"tags": [],
	"description": "Verbesserung und Weiterentwicklung der matplotlib Bibliothek.",
	"content": "seaborn baut auf matplotlib auf und bietet eine Vielzahl von Funktionen, die es erlauben schnell und einfach schöne statistische Visualisierungen zu erstellen. Seaborn ist also keine komplett eigenenständige Graphik-Bibliothek, sondern nutzt intern die Funktionalitäten und Datenstrukturen von matplotlib.\nEine wichtige Funktion ist die sns.set() Methode. Wenn sie am Anfang eines Python-Scripts ausgeführt wird, wird intern das Design der Plots erheblich verbessert. Alle plots, die nach dem Aufruf der Funktion erstellt werden, sehen viel besser aus.\nTesten Sie den Unterschied mit dem folgenden Beispiel:\n# import the libraries and give them some shorter names import matplotlib.pyplot as plt import seaborn as sns # setup the seaborn library sns.set() # create the same plot as in the previous example x = range(1, 10) plt.plot(x, x)    Wenn Sie im Jupyter Notebook das Code-Beispiel ausgeführt haben und danach den Aufruf sns.set() entfernen, ändert sich das Design des Plots erstmal nicht. Für einen \u0026ldquo;Reset\u0026rdquo; müssen Sie den Kernel (also der im Hintergrund laufende Python Prozess) mit einem Klick auf neu starten.\n  "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/packages/scipy/",
	"title": "scipy",
	"tags": [],
	"description": "Funktionen und Methoden aus der Statistik.",
	"content": "scipy ist fest mit numpy und pandas verbunden und bietet eine Menge an Funktionen und Methoden aus der Mathematik und Statistik an.\nFür uns ist vor alle das Paket scipy.stats Interessant. Mit ihm können Zufallszahlen aus verschiedensten statistischen Verteilungen generiert werden oder auch statistische Tests durchgeführt werden. Hier finden Sie einen Überblick über alle Methoden des Pakets.\nIm folgenden Beispiel wird ein Zweistichproben-t-Test an zwei numerischen Listen durchgeführt.\n# import the package stats from the library scipy from scipy import stats # create two numerical arrays x = [12, 10, 11, 13, 14, 10, 13, 13, 22] y = [1, 4, 2, 3, 5, 2, 1, 0, 0, 1, 2] # perform a two sample t-test, to test if the samples have different means stats.ttest_ind(x,y)    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/organisation/packages/scikitlearn/",
	"title": "scitkit-learn",
	"tags": [],
	"description": "Bietet Funktionen und Methoden für maschinelles Lernen.",
	"content": "scikit-learn ist eine umfangreiche Bibliothek für maschinelles Lernen in Python. Es bietet eine Vielzahl an verschiedenen Algorithmen, mit denen zum Beispiel Vorhersagen oder Bilderkennung durchgeführt werden können.\n  Faces recognition example using eigenfaces and SVMshttps://scikit-learn.org/stable/auto_examples/applications/plot_face_recognition.html#sphx-glr-auto-examples-applications-plot-face-recognition-py\n  # import the packages import numpy as np from sklearn.linear_model import LinearRegression # create some dummy dependent and independent variable X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]]) y = - 1 * X[:,0] + 2 * X[:,1] # estimate a linear regression and print out the coefficients reg = LinearRegression().fit(X, y) reg.coef_    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/basics/",
	"title": "Grundlagen",
	"tags": [],
	"description": "",
	"content": "27.01 – 02.02 Grundlagen der Datenanalyse in Python Diese Einheit gibt eine Einführung in die Aufgaben und grundlegenden Begriffe der angewandten Statistik. Im zweiten Teil wird das pandas Paket vorgestellt und gezeigt, wie Datensätze eingelesen und bearbeitet werden können.\nZiele  Beschreiben Sie Datensätze mit dem statistischen Grundvokabular Lesen Sie Datensätze als DataFrames in Python ein und aus Filtern Sie DataFrames nach Spalten oder Zeilen Erstellen Sie neue Variablen Projektaufgabe Die Pressestelle der San Francisco Public Library möchte einen Online-Artikel zum Kundenstamm der Bibliothek erstellen. Dazu hat sie Ihnen einen Datensatz geschickt, den Sie auswerten sollen.\n Erstellen Sie eine Beschreibung des Datensatzes unter Verwendung des statistischen Grundvokabulars. Lesen Sie den Datensatz ein und berechnen Sie für jeden Kunden  die Dauer der Mitgliedschaft in Jahren die Anzahl der Ausleihen und Verlängerungen pro Jahr der Mitgliedschaft   Senden Sie bis Freitag Ihre Beschreibung zusammen mit den Berechnungen in Form eines integrierten Python Notebooks an malte@bonart.de.      "
},
{
	"uri": "https://bonartm.github.io/data-librarian/descriptive_statistics/",
	"title": "Deskriptive Statistik und Visualisierungen",
	"tags": [],
	"description": "",
	"content": "03.02 – 09.02 Deskriptive Statistik II und Visualisierungen Dieses Modul gibt eine Einführung in die deskriptive Statistik mit pandas und zeigt, wie statistische Visualisierungen in Python erstellt werden können.\nZiele  Berechnen und interpretieren Sie grundlegende Lage- und Streuungsmaße Beschreiben Sie univariate stetige und diskrete Verteilungen Beschreiben und Berechnen Sie Statistiken für stetige und diskrete bivariate Verteilungen Erstellen Sie einfache Visualisierungen  Projektaufgabe Für den Online-Artikel zum Kundenstamm der Bibliothek braucht die Pressestelle einige interessanten Zahlen zum Thema Alter und Bibliotheksnutzung. Außerdem möchte sie die Daten in einer Info-Graphik zusammenstellen.\nFür eine erste Demo sind Sie verantwortlich.\n Berechnen Sie 2-3 Statistiken und Erstellen Sie 2-3 Visualisierungen basierend auf den Informationen im Datensatz. Nutzen Sie pandas zur Berechnung der Statistiken und seaborn oder matplotlib für die Visualisierungen. Senden Sie bis Freitag Ihren Report in Form eines integrierten Python Notebooks an malte@bonart.de.    Beispielfragen, die Sie mit dem Datensatz beantworten und visualisieren können:\n Wie viele Senioren und Kinder sind Kunden der San Francisco Public Library? Wie viele Nutzer möchten per Mail informiert werden? Wie alt sind diese Nutzer durchschnittlich im Vergleich zu Nutzern, die per Post informiert werden möchten? Wie viele Ausleihen werden im Mittel pro Altersgruppe und pro Jahr getätigt? Ist die Streuung zwischen den Gruppen gleich?    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/inference/",
	"title": "Inferenzstatistik",
	"tags": [],
	"description": "",
	"content": "10.02 – 16.02 Grundlagen der Inferenzstatistik Diese Einheit gibt einen Einblick in die Inferenzstatistik und stellt die Berechnung von Hypothesentest in Python vor.\nZiele  Führen Sie einen Hypothesentest für den Vergleich von zwei Mittelwerten durch.  Projektaufgabe Unterscheidet sich das Ausleihverhalten von jungen und älteren Bibliotheksnutzern signifikant voneinander?\n Erstellen Sie jeweils eine Liste der Total Checkouts für YOUNG ADULT und SENIOR aus der Spalte Patron Type Defintion. Wie viele Ausleihen pro Person haben die beiden Nutzergruppen jeweils im Mittel getätigt? Führen Sie einen Mittelwerttest durch. Verwenden Sie dafür die Funktion ttes_ind aus dem scipy.stats Paket Senden Sie bis Freitag Ihren Report in Form eines integrierten Python Notebooks an [malte@bonart.de] (mailto:malte@bonart.de).    "
},
{
	"uri": "https://bonartm.github.io/data-librarian/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bonartm.github.io/data-librarian/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]