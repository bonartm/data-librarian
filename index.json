[{"uri":"https://bonartm.github.io/data-librarian/solutions/","title":"Lösungen zu den Kursaufgaben","tags":[],"description":"","content":"Im Laufe des Kurses werden hier die Lösungen zu den einzelnen Aufgaben hochgeladen. Die Projektaufgaben werden am Präsenztag gesammelt besprochen.\nKursorganisation und Vorbereitung Quiz  Strg+Enter siehe hier: https://docs.anaconda.com/anaconda/packages/pkg-docs/ 423448, len(df) siehe (unter sns.set()): https://seaborn.pydata.org/introduction.html  Grundlagen Grundbegriffe  Wie viele Merkmale besitzt der Datensatz? 15. Wie groß ist die Stichprobengröße des Datensatzes? 423448. Wer oder was sind die Merkmalsträger? Bibliothekskunden der SF Public Library. Von wann bis wann wurden die Daten erhoben? Das Bibliothekssystem wurde 2003 installiert. Die Daten reichen bis 2016. Wie lässt sich die Grundgesamtheit beschreiben? Handelt es sich um eine Vollerhebung? Grundgesamtheit sind alle Bibliothekskunden der San Francisco Library. Wahrscheinlich handelt es sich um eine Vollerhebung. Es lässt sich diskutieren, ob die Grundgesamtheit größer gefasst werden kann (z.B. alle Kunden von Bibliotheken in den USA oder alle Kunden von öffentlichen Bibliotheken). Sind die Daten repräsentativ für diese Grundgesamtheiten? Welche Merkmale sind stetig? Welche diskret?  Die Variablen Total Checkouts und Total Renewals sind stetig, alle anderen diskret.   Welchem Skalenniveau entsprechen die einzelnen Merkmale (Nominal-, Ordinal- oder Metrische Skala)?  Metrisch: Total Checkouts, Total Renewals, Circulation Active Year, Year Patron registered Ordinal: Age Range Nominal: Der Rest   Enthält der Datensatz fehlende Werte?  Ja, z.B. Age Range   Handelt es sich um Querschnitts-, Längsschnitss- oder Paneldaten?  Querschnittsdaten    Series und DataFrames  month: nominal (oder ordinal, wenn z.B. Dez \u0026gt; Jan gilt.), diskret, object temp: metrisch, stetig, int below_zero: nominal, diskret, boolean    Lösungen   solutions_dataframe.ipynb  (1 ko)    Datenrundreise   Lösungen   solutions_datenrundreise.ipynb  (35 ko)    Exkurs: Einlesen von Daten  In Linux kann z.B. mit dem free Kommando der freie Speicherplatz ermittelt werden. Bei 8 Gigabyte Arbeitsspeicher werden ca. 3 Gigabyte vom System verbraucht. 5 Gigabyte sind 5 000 000 000 Bytes. Somit können theoretisch 625 000 000 Zahlen vom Typ int64 eingelesen werden. Eine Tabelle mit 100 Variablen kann somit 6.25 Millionen Beobachtungen enthalten. Der Library Datensatz verbraucht ca. 220 Megabyte im Arbeitsspeicher (df.info(memory_usage='deep')).  Feature Engineering   Lösungen   solutions_fe.ipynb  (17 ko)    Spalten und Zeilen   Lösungen   solutions_selection.ipynb  (2 ko)    Fehlende Werte  None ist ein spezieller Datentyp in Python der fehlende Objekte oder Variablen bezeichnet. 5 ist eine ganzzahlige Zahl vom Typ int True ist eine binäre Zahl vom Typ boolean Die entsprechenden Ausdrücke in \u0026quot;\u0026quot; repräsentieren jeweils einen Text vom Typ str (oder object in pandas)    Weitere Lösungen   solutions_na.ipynb  (4 ko)    Quiz  https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html len(df) oder df.shape[0] df['Age Range'].isna().sum() len(df[(df['Age Range'] == '60 to 64 years') \u0026amp; (df['Circulation Active Year'] == '2016')])    Lösungen   solutions_frequency.ipynb  (5 ko)    #### Lagemaße Der Median ist robust gegenüber Ausreißern, da er nicht auf den absoluten sondern nur auf der relativen Reihung der Beobachtungen basiert. Wird beispielsweise der größte Wert einer Messreihe um den Faktor 1000 tausend vergrößert, so ändert sicht der Median nicht. Der Mittelwert hingegen basiert auf den absoluten Werten. Da die Variable `Total Checkouts` einige wenige sehr große Ausreißer enthält, ist der Mittelwert hier viel größer. #### Streuungsmaße   Lösungen   solutions_variance.ipynb  (1 ko)    #### Symmetrie und Schiefe Von oben links nach unten rechts: - Bimodal, Symmetrisch - Unimodal, Linksschief/ Rechtssteil - Unimodal, Linksschief/ Rechtssteil - Unimodal, Rechtsschief/ Linkssteil - Kein Modus, Symmetrisch, Gleichverteilung - Unimodal, Linksschief/ Rechtssteil - Unimodal, Rechtsschief/ Linkssteil - Unimodal, Rechtsschief/ Linkssteil - Unimodal, Symmetrisch #### Symmetrie: Fallstudie   Lösungen   solutions_case_study.ipynb  (49 ko)    #### Korrelation: Anscombe-Quartett   Lösungen   solutions_anscombe.ipynb  (37 ko)    #### Fox News Die Balkendiagramme beginnen nicht im Nullpunkt. Somit werden die relativen Unterschiede viel größer dargestellt, als sie in Wahrheit sind. #### Quiz - rechtsschief - `df['Provided Email Address'][df['Age Range'] == '0 to 9 years'].sum()` - `df['Total Checkouts'].quantile(0.60)` - `df['Age Range'].mode()` - `df['Total Renewals'].quantile([0.25, 0.75]).diff()` ### Inferenzstatistik   Lösungen   solutions_inference.ipynb  (12 ko)      Alle Lösungen   solutions_anscombe.ipynb  (37 ko)   solutions_boxplots.ipynb  (3 ko)   solutions_case_study.ipynb  (49 ko)   solutions_dataframe.ipynb  (1 ko)   solutions_datenrundreise.ipynb  (35 ko)   solutions_fe.ipynb  (17 ko)   solutions_frequency.ipynb  (5 ko)   solutions_inference.ipynb  (12 ko)   solutions_na.ipynb  (4 ko)   solutions_selection.ipynb  (2 ko)   solutions_variance.ipynb  (1 ko)    -- "},{"uri":"https://bonartm.github.io/data-librarian/","title":"Modul 3","tags":[],"description":"","content":"Daten analysieren und darstellen Herzlichen Willkommen zum dritten Modul Daten analysieren und darstellen des ZBWI Zertifikationskurs \u0026ldquo;Data Librarian\u0026rdquo;. In diesem Modul möchten wir Ihnen einen praktischen Einblick in die Datenanalyse mit der Programmiersprache Python geben.\nNachdem Sie im ersten Modul schon die grundlegenden Werkzeuge und Programmiertechniken kennen gelernt und im zweiten vertieft haben, werden Sie sich in den kommenden Wochen anhand von praktischen Beispielen und Aufgaben Grundlagen der deskriptiven Statistik, der Datenvisualisierung und des Maschinellen Lernens aneignen. Dabei können Sie Ihre Programmier- und Datenanalysekenntnisse in Python verbessern und im bibliothekarischen Kontext anwenden. Nach dem Kurs sollten sei ein grundsätzliches Verständnis wichtiger statischer Verfahren und Methoden des machinellen Lernen kennen besitzen und anwenden können.\n Die Kurseinheiten bauen aufeinander auf. Wir empfehlen Ihnen deswegen durch die Inhalte dieses Moduls mit den Pfeiltasten zu navigieren. In der linken Navigationsleiste wird Ihr Fortschritt gespeichert. Diese Webseite ist für alle Endgeräte optimiert. Sie können deswegen auch Ihr Smartphone oder Tablet zum Lesen nutzen. Starten Sie nun mit der ersten Kurseinheit indem Sie auf   klicken oder mit den Pfeiltasten  navigieren.    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/packages/numpy/","title":"numpy","tags":[],"description":"Effizientes Handling und Bearbeitung von numerischen Arrays.","content":"numpy bietet den array als zentrale Datenstruktur. Mit ihm lassen sich numerische Daten effizient im Arbeitsspeicher (RAM) erstellen, ein- und auslesen, bearbeiten und aggregieren.\nNumpy bietet neben dem array viele Funktionen an, mit denen sich effizient Berechnungen auf diesen durchführen lassen können. Außerdem wird die klassische Matrizenrechnung unterstützt.\n# import the library and give it a shorter name \u0026#39;np\u0026#39; import numpy as np # create 100 randomly distributed numbers X = np.random.normal(size=100) # transform X into a 2-dimensional array of size 20x5 X.reshape((20, 5)) # calculate the matrix dot product: X*X\u0026#39;, where X\u0026#39; is the transpose of X X.dot(X.T)    Beispielsweise kann ein Bild als dreidimensionales numpy array dargestellt werden: Die ersten zwei Dimensionen beschreiben die Farbintensität der Pixel auf einer zweidimensionalen Fläche. Die dritte Dimension speichert die jeweiligen Pixelwerte für die Farbkanäle rot, grün und blau.\n  https://www.oreilly.com/library/view/elegant-scipy/9781491922927/ch01.html\n  "},{"uri":"https://bonartm.github.io/data-librarian/basics/pandas/series/","title":"Series und DataFrames","tags":[],"description":"","content":"Series und DataFrames sind die zentralen Datenstrukturen in Pandas. Series sind wie standardmäßige Listen in Python, mit dem wichtigen Unterschied, dass Series nur Werte eines einzelnen Datentyps enthalten können.\nimport pandas as pd x = pd.Series([34, 12, 23, 45]) print(x) x.dtype    Ein Datentyp ist die grundlegende Einheit, in der einzelne Werte in einer Programmiersprache vom Computer gespeichert und verarbeitet werden können. Beispiele für Datentypen in pandas sind: float für Gleitkommazahlen, int für Ganzzahlen, bool für binäre True, False Werte oder datetime für Datumswerte. Text wird im pandas-spezifischen Format object abgespeichert. Für einen DataFrame der beispielsweise in einer Variable mit dem Namen df gepeichert ist, können Sie sich die Datentypen jeder Spalte mit df.dtypes ausgeben lassen.\n  Ein DataFrame fasst mehrere Series gleicher Länge zu einer Datentabelle mit Zeilen (Beobachtungen), Spalten (Variablen) und Spaltennamen (Variablennamen) zusammen.\nEin reguläres Python-Dictionary mit den Spaltennamen als Keys und den Values in Form von Python-Listen kann in ein DataFrame transfomiert werden:\nimport pandas as pd data = {\u0026#39;month\u0026#39;: [\u0026#39;Jan\u0026#39;, \u0026#39;Feb\u0026#39;, \u0026#39;Mar\u0026#39;], \u0026#39;temp\u0026#39;: [-5, 2, 3], \u0026#39;below_zero\u0026#39;: [True, False, False]} df = pd.DataFrame(data) print(df)    In der praktischen Datenanalyse werden Sie nur selten DataFrames oder Series manuell erstellen, sondern im Computer abgespeicherte Datentabellen aus anderen Formaten, wie Excel oder .csv einlesen.\nSkalenniveau und Datentypen (15 Min)  Welches Skalenniveau besitzen die Variablen im obigen Beispiel? Sind die Variablen stetig oder diskret? Was ist der Datentyp jeder einzelnen Spalte? Erweitern Sie das Python-Dictionary und  erstellen Sie eine neue Zeile mit den Werten ('Apr', 5, False) erstellen Sie eine neue Spalte year mit den Werten (2020, 2020, 2020, 2020)      "},{"uri":"https://bonartm.github.io/data-librarian/basics/ml/statistic/","title":"Statistik","tags":[],"description":"","content":" Justus Perthes (1838): Rhein, Elbe und Oder   Statistik ist die traditionelle Wissenschaft von der Erhebung und Analyse von Daten. Sie verfügt über eine großes theoretisches und mathematisches Fundament und lässt sich in die Teilgebiete deskriptive (Beschreiben), explorative (Suchen) und schließende (Induktion) Statistik unterteilen.\nLesen Sie mehr über die Grundlagen der Statistik im Kapitel Grundbegriffe der Statistik.\n"},{"uri":"https://bonartm.github.io/data-librarian/basics/pandas/io/","title":"Ein- und Ausgabe","tags":[],"description":"","content":"Die Funktionen zur Ein- und Ausgabe von Daten in pandas sind umfangreich aber systematisch organisiert. Um beispielsweise eine .csv Datei einzulesen und in einer Variable zu speichern verwenden Sie die Funktion read_csv:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df.head()    Um einen eingelesenen Datensatz beispielsweise im .json Textformat zu speichern verwenden Sie die Funktion to_json:\ndf.to_json(\u0026#34;../data/Library_Usage.json\u0026#34;)     Manche Funktion aus dem pandas Paket sind statische Funktionen: Sie sind an kein konkretes Objekt gebunden, sondern werden über den Bibliotheksnamen pd aufgerufen. Beispiele: pd.read_csv, pd.to_numeric, pd.crosstab. Andere Funktionen sind an ein bestimmtes Objekt, welches mit einer Variable referenziert wird, gebunden. In der Regel ist dies ein DataFrame oder eine Series. Beispiele: df.to_csv, df.corr, df.head, x.mean. Machen Sie sich mit dem Unterschied vertraut: Was bedeuten pd und df und x in den Beispielen?    Exkurs: Einlesen von Daten Die Festplatte des Computers dient zur persistenten Speicherung von Dateien. Auch wenn der Strom weg ist, bleiben diese darauf erhalten. Die hohe Speicherfähigkeit hat ihren Preis: Die Zugriffszeiten, d.h. die Zeit die die Festplatte benötigt um z.B. Zeilen einer Textdatei zu lesen und die Werte an den Prozessor zu übergeben, sind hoch.\nDeswegen gibt es neben dem Festplattenspeicher auch noch den Arbeitsspeicher (RAM). Dessen Zugriffszeiten sind wesentlich schneller, die Daten sind jedoch nicht persistent. Wenn Sie z.B. eine Tabelle mit Excel öffnen, dann werden die Daten von der Festplatte in den Arbeitsspeicher geladen. Das gleiche, nur ohne graphische Oberfläche, passiert, wenn Sie Daten mit dem pandas Paket einlesen.\nDa normalerweise der Datensatz komplett in den Arbeitsspeicher geladen werden muss, können prinzipiell nicht beliebig große Datenmengen bearbeitet werden.\nExkurs: Datenrundreise (30 Min)  Informieren Sie sich hier über die verschiedenen Funktionen zur Ein- und Ausgabe. Lesen Sie den Datensatz \u0026quot;../data/Library_Usage_Small.csv\u0026quot; ein (Download hier). Er enthält nur die ersten 10 Zeilen des originalen Datensatzes (aus Performancegründen). Speichern sie den DataFrame als .json ab. Lesen Sie die .json ein und speichern Sie den DataFrame als .html Tabelle ab (Die .html Datei lässt sich auch mit einem Browser öffnen). Lesen Sie dann die .html Datei ein (Achtung: read_html gibt eine Liste von DataFrames zurück!) und speichern Sie den DataFrame als .xlsx Datei ab (Die .xlsx Datei lässt sich auch mit Excel öffnen). Lesen Sie nun die .xlsx Datei ein und speichern Sie den DataFrame wieder als .csv ab. Achten Sie darauf, den ursprünglichen originalen Datensatz nicht zu überschreiben. Vergleichen Sie die originale .csv Version mit der Version, nach der Datenrundreise. Ist alles gleich geblieben?    Exkurs: Arbeitsspeicher (30 Min)  Finden Sie heraus, wie viel freier Arbeitsspeicher Ihr Computer hat (Das Betriebssystem und Hintergrundprogramme verbrauchen auch RAM). Wie viele int64 Werte, also Zahlen, die 8 Byte (=64 Bit) Speicher benötigen, können Sie damit theoretisch in den Arbeitsspeicher laden? Tip: Nutzen sie Google zum Umrechnen. Wie viele Beobachtungen kann eine Tabelle mit 100 numerischen Variablen damit maximal theoretisch haben, damit Sie diese noch bearbeiten können? Nutzen Sie die Funktion df.memory_usage() um sich den tatsächlich benötigten Speicher eines DataFrames oder einer Series anzeigen zu lassen. Mit dem Funktionsargument deep=True wird der Wert genau ermittelt und nicht nur geschätzt.    "},{"uri":"https://bonartm.github.io/data-librarian/basics/ml/ml/","title":"Machine Learning","tags":[],"description":"","content":"Seit der Erfindung des Personal Computers und des Internets werden statistische Probleme immer komplexer und größer. Die Datenmengen erfordern neue effiziente Strukturen zum Speichern und Auffinden der Informationen.\nMaschinelles Lernen (Machine Learning oder Statistical Learning) bedeutet in diesem Kontext relevante und signifikante Muster und Trends aus den Daten zu extrahieren um die Daten \u0026ldquo;zu verstehen\u0026rdquo;. Dabei spielen Computer und deren wachsende Rechenpower eine immer größere Rolle. Sie haben die klassische angewandte Statistik revolutioniert und es sind vor allem Ingenieure und Informatiker, die die Weiterentwicklung der Disziplin heutzutage vorantreiben.1\nIm Maschinellen Lernen steht insbesondere die Vorhersagekraft und Generalisierbarkeit von statistischen Methoden und Algorithmen im Vordergrund. Ziel ist es, möglichst gute Prognosen, beispielsweise bei der Gesichtserkennung, zu machen. Die klassische Statistik dagegen ist stärker an den kausalen Zusammenhängen und der Stärke von signifikanten Einflüssen einzelner Faktoren auf ein Resultat interessiert.\nTeachable Machine von Google ermöglicht das Trainieren von Machine Learning Modellen im eigenen Web-Browser ohne das Programmiercode geschrieben werden muss. Somit wird das Grundprinzip des Maschinellen Lernens auch ohne Vorkenntnisse erfahrbar und man bekommt ein gutes Gespür für die Möglichkeiten und Grenzen der Methode. Experimentieren Sie zum Beispiel mit dem Bild-Klassifikator.\n  Maschinelles Lernen und die angewandte Statistik besitzen große Überschneidungen und beide Gebiete bauen auf Erkenntnissen der Wahrscheinlichkeitstheorie auf. Machine Learning ist dabei auch ein Teilgebiet der Künstlichen Intelligenz, die als die Automatisierung von intellektuelle Aufgaben, die normalerweise von Menschen durchgeführt werden verstanden wird.2\nKI kann auch allein mit durch Programmierer fest eingebauten Regeln entstehen. Diese Regeln legen fest, wie eine Eingabe (z.B Pixelwerte eines Bilds oder die Anzahl der gestrigen Sonnenstunden) in eine Ausgabe (Wahrscheinlichkeit für ein Katzenbild oder heutige Regenwahrscheinlichkeit) transformiert wird. Damit diese Art der KI erfolgreich ist, braucht es ein großes Vorwissen und spezielle Expertise. Algorithmen des Maschinellen Lernens werden hingegen trainiert, d.h. sie lernen selbstständig die optimalen Regeln,die von einer Eingabe zu einer Ausgabe schließen lassen. Damit diese Transformation Erfolg hat benötigt das System viele Beispiele, für die die Ausgabe bekannt ist, um von diesen zu lernen.2\n  Hastie, Tibshirani, Friedman (2017): The Elements of Statistical Learning, Springer. \u0026#x21a9;\u0026#xfe0e;\n Francois Chollet (2018): Deep Learning with Python, Manning. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://bonartm.github.io/data-librarian/basics/pandas/columns/","title":"Auswahl und Erstellung von Spalten","tags":[],"description":"","content":"Die Spalten eines DataFrames werden über einen Spaltenindex referenziert. Üblicherweise besteht der Spaltenindex aus Spaltennamen in Textform:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df.columns    Einzelne Series können wie bei einem Python Dictionary mit df[\u0026lt;name\u0026gt;] extrahiert werden. Mehre Spalten mit df[[\u0026lt;name1\u0026gt;, \u0026lt;name2]]. Wenn Sie Spalten mit der doppelten Liste [[...]] auswählen erhalten Sie in jedem Fall wieder einen DataFrame zurück. Das Ergebnis der Auswahl können Sie bei Bedarf wieder in einer Variablen abspeichern: Versuc x = df[\u0026#39;Total Renewals\u0026#39;] df[[\u0026#39;Total Renewals\u0026#39;, \u0026#39;Total Checkouts\u0026#39;]] column_names = [\u0026#39;Total Renewals\u0026#39;, \u0026#39;Total Checkouts\u0026#39;] # auxiliary variable subset = df[column_names] print(x) print(subset)    Spalten können mit einer Zuweisung (=) überschrieben oder neu erstellt werden:\ndf[\u0026#39;dummy_variable\u0026#39;] = 5    Bei der Auswahl von Spalten und Zeilen wird keine Kopie des DataFrames oder der Series erstellt, sondern nur eine Referenz auf die ursprüngliche Tabelle. Wenn Sie Daten in der ursprünglichen Tabelle ändern, so ändert sich auch die Referenz:\nx = df[\u0026#39;Total Renewals\u0026#39;] df[\u0026#39;Total Renewals\u0026#39;] = 5 x    Berechnungen auf schon bestehenden Variablen können auch direkt einer neuen Spalte zugeordnet werden:\nimport numpy as np df[\u0026#39;is_adult\u0026#39;] = df[\u0026#39;Patron Type Definition\u0026#39;] == \u0026#39;ADULT\u0026#39; df[\u0026#39;log_renewals\u0026#39;] = np.log(df[\u0026#39;Total Renewals\u0026#39;])    Im ersten Beispiel wurde zuerst die Anweisung df['Patron Type Definition'] == 'ADULT' durchgeführt. Das implizite Ergebnis dieser Anweisung ist eine Series mit booleschen Werten True oder False. Die neu erstellte Series wird dann in einer neuen Spalte is_adult dem DataFrame angehängt.\nIm zweiten Beispiel wurde der Logarithmus auf den Werten der Spalte Total Renewals berechnet und einer neuen Spalte log_renewals zugewiesen.\nFallstudie: Feature Engineering (30 Min) Ziel ist es, eine neue Variable Membership Duration zu erstellen, die für jeden Kunden die aktive Mitgliedschaft in Monaten seit der Registrierung misst. Die aktive Mitgliedschaft wird definiert als:\n\u0026#39;Membership Duration\u0026#39; = (\u0026#39;Circulation Active Year\u0026#39; - \u0026#39;Year Patron Registered\u0026#39;)*12 + \u0026#39;Circulation Active Month\u0026#39; Versuchen Sie die folgenden Codebeispiele nachzuvollziehen, auch wenn Sie nicht alle Funktionen im Detail kennen oder verstehen.\n Die Spalte Circulation Active Year ist als Text und nicht als Zahl abgespeichert! Konvertieren Sie die Spalte in ein numerisches Format. Überschreiben Sie die ursprüngliche Variable mit den neuen Werten. Nutzen Sie dieses Codesnippet:  pd.to_numeric( df[\u0026#39;Circulation Active Year\u0026#39;], errors=\u0026#39;coerce\u0026#39; )  Die Spalte Circulation Active Month enthält die Monatsnamen als Text. Für die Berechnung muss diese in ein numerisches Format konvertiert werden.\n Zuerst konvertieren wir die Spalte in ein Datumsformat. Das geht mit der Funktion pd.to_datetime. Überschreiben Sie wieder die ursprüngliche Variable mit den neuen Werten. Sie können dieses Codesnippet nutzen:  pd.to_datetime( df[\u0026#39;Circulation Active Month\u0026#39;], errors=\u0026#39;coerce\u0026#39;, format=\u0026#34;%B\u0026#34; )  Jetzt extrahieren wir den Monat als Zahl aus der Spalte:  df[\u0026#39;Circulation Active Month\u0026#39;].dt.month   Berechnen Sie nun die aktive Mitgliedschaftsdauer in Monaten wie oben definiert und weisen Sie das Ergebnis der Spalte Membership Duration zu.\n  Nehmen Sie an, dass Einträge mit fehlenden Werten bedeutet, dass die Person 0 Monate aktiv Mitglied gewesen ist. Ersetzen Sie dazu alle NaN values in der neuen Variable mit der Zahl 0. Nutzen Sie dieses Codesnippet (siehe auch diese Lektion über die Behandlung fehlender Werte):\n  df[\u0026#39;Membership Duration\u0026#39;].fillna(0)    "},{"uri":"https://bonartm.github.io/data-librarian/basics/ml/data-science/","title":"Data Science","tags":[],"description":"","content":"Ein Data Scientist ist eine Person, die oder der Wissen und Erkenntnisse aus strukturierten und unstrukturierten Daten gewinnt. Data Science ist eine interdisziplinäre Disziplin und liegt irgendwo in der Schnittmenge von angewandter Statistik, angewandter Informatik (Hacking skills) und spezielles Fachwissen (domain knowledge/ substantive expertise).\nAufgrund der stark angewachsenen Mengen an unstrukturierten Daten aus heterogenen Datenquellen (Text, Bilder, Sensoren, Netzwerke, Videos, \u0026hellip;) reichen die Methoden und Fertigkeiten, die die Statistik traditionellerweise liefert und vermittelt, nicht mehr aus, um diese Daten effizient zu strukturieren, aggregieren, kombinieren, analysieren und visualisieren zu können:\n A Data Scientist is someone who knows more statistics than a computer scientist and more computer science than a statistician 1.\n Quelle: http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram\n  Joel Grus (2019): Data Science from Scratch, O'Reilly. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://bonartm.github.io/data-librarian/basics/pandas/rows/","title":"Auswahl von Zeilen","tags":[],"description":"","content":"Die Zeilen eines DataFrames können über drei verschiedene Arten ausgewählt werden. Das System kann am Anfang etwas verwirrend sein. Wir betrachten hier nur den wichtigsten Fall der Zeilenauswahl: Die Auswahl über logische Ausdrücke mittels loc[]:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df.loc[df[\u0026#39;Total Checkouts\u0026#39;] \u0026gt; 10000]    Der Ausdruck df['Total Checkouts'] \u0026gt; 10000 wird zuerst ausgewertet und ergibt eine boolesche Series mit Einträgen True wenn die Beobachtung mehr als 1000 Ausleihen getätigt hat und False sonst.\nMit einer booleschen Series lassen sich dann die Zeilen des DataFrame auswählen: Es werden genau die Zeilen zurückgegeben, bei denen die Series True Werte enthält.\nAnstatt alles in einer Zeile zu schreiben, können wir auch eine Hilfsvariable erstellen, die den booleschen Vektor zwischenspeichert:\nrow_filter = df[\u0026#39;Total Checkouts\u0026#39;] \u0026gt; 10000 df.loc[row_filter]    Für den booleschen Zeilenfilter können komplexe logische Ausdrücke unter Zuhilfenahme der Operatoren \u0026lt;, \u0026gt;, \u0026amp;, |, == u.s.w. gebildet werden. Welche Zeilen werden hier gefiltert?\nrow_filter = (df[\u0026#39;Patron Type Definition\u0026#39;] == \u0026#39;SENIOR\u0026#39;) \u0026amp; (df[\u0026#39;Notice Preference Definition\u0026#39;] == \u0026#39;email\u0026#39;) df.loc[row_filter]    Logische Operatoren    Ausdruck Beschreibung     \u0026lt;/ \u0026lt;= kleiner/ kleiner gleich   \u0026gt; / \u0026gt;= größer/ größer gleich   == gleich   != ungleich   \u0026amp; elementweises logisches und (True und True ergeben True, sonst False)   | elementweises logisches oder (False und False ergeben False, sonst True)   ~ elementweise logische negation (True ergibt False und umgekehrt)      Nützlich ist auch die Funktion Series.between(left, right), mit der eine boolesche Series erstellt wird, die True ist wenn der Wert der ursprünglichen Series zwischen oder auf den Werten left und right liegt. Im folgenden Beispiel wird gezeigt, dass die beiden Filter das gleiche Ergebnis liefern:\nfilter1 = (df[\u0026#39;Total Checkouts\u0026#39;] \u0026gt;= 20) \u0026amp; (df[\u0026#39;Total Checkouts\u0026#39;] \u0026lt;= 80) filter2 = df[\u0026#39;Total Checkous\u0026#39;].between(20, 80) all(filter1 == filter2)    Filtern (30 Min)  Filter Sie den Datensatz nach Kindern unter 10 Jahren. Wie viele Einträge erhalten Sie? Gibt es Personen mit mehr als 20000 Ausleihen? Wie viele Personen stammen aus dem Norden San Franciscos (Supervisor Districts 1, 2 und 3)? Nutzen Sie die Funktion Series.isin(). Wie viele Prozent der Beobachtungen haben eine Membership Duration von Null Monaten?    "},{"uri":"https://bonartm.github.io/data-librarian/basics/pandas/na/","title":"Exkurs: Fehlende Werte","tags":[],"description":"","content":"Real erhobene Daten sind meistens unsauber und fehlerhaft. Ein häufiges Problem dabei sind fehlende Werte, also Beobachtungen für die manche Merkmale nicht erhoben wurden. In jedem Datensatz werden fehlende Werte anders gekennzeichnet, aber man findet oft diese Kodierungen wieder: \u0026quot;-999\u0026quot;, \u0026quot;NA\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;None\u0026quot;, \u0026quot;NULL\u0026quot;, \u0026quot;#N/A\u0026quot;.\nWenn beispielsweise der Mittelwert einer statistischen Variable berechnet wird, so muss entschieden werden, wie mit fehlenden Werten umgegangen werden soll: Sollen die Werte entfernt werden? Sollen die fehlenden Werte durch einen bestimmten Wert ersetzt werden?\nIn DataFrames werden fehlende Werte durch das Schlüsselwort NaN (\u0026quot;Not a Number\u0026quot;) angezeigt. Beim Einlesen von Daten (siehe z.B. die read_csv Funktion) können mit dem Argument na_values zusätzliche Kodierungen für fehlerhafte Werte mit angegeben werden.\nFallbeispiel Der Library Usage Datensatz enthält die Kodierung \u0026quot;None\u0026quot; für fehlende Werte. Diese werden von pandas beim Einlesen von numerischen Spalten nicht richtig erkannt:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df[\u0026#39;Circulation Active Year\u0026#39;] Obwohl die Spalte 'Circulation Active Year' numerisch ist, wird Sie von pandas als Text abgespeichert, da \u0026quot;None\u0026quot; nicht als Zahl erkannt wird. Möchten Sie z.B. 2019 - df['Circulation Active Year'] berechnen, so werden Sie eine Fehlermeldung erhalten, da für Text-Werte keine Substraktionen durchgeführt werden können.\nUm das Problem zu beheben können Sie auf zwei Arten vorgehen. Sie können schon beim Einlesen, die Kodierung für fehlende Werte mit angeben:\ndf = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;, na_values=\u0026#34;None\u0026#34;) df[\u0026#39;Circulation Active Year\u0026#39;] Oder Sie führen nach dem Einlesen eine explizite Umwandlung des Datentyps durch:\ndf = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;, na_values=\u0026#34;None\u0026#34;) df[\u0026#39;Circulation Active Year\u0026#39;] = pd.to_numeric(df[\u0026#39;Circulation Active Year\u0026#39;], errors=\u0026#39;coerce\u0026#39;) df[\u0026#39;Circulation Active Year\u0026#39;]  Datentypen (1 Minute) Was unterscheidet den Wert None vom Wert \u0026quot;None\u0026quot;? Was den Wert 5 vom Wert \u0026quot;5\u0026quot;? Was den Wert \u0026quot;NaN\u0026quot; vom Wert NaN? Ist True und \u0026quot;True\u0026quot; das gleiche?\n  Behandlung von Fehlenden Werten Pandas bietet für Series und DataFrames die nützlichen Funktionen isna(), notna(), dropna() und fillna() an um fehlende Werte zu identifizieren, zu entfernen oder mit anderen Werten zu ersetzen.\nFilter Die Funktionen isna (notna) geben eine boolesche Series zurück, die True (False) ist, wenn an der Stelle ein fehlender Wert steht. Damit pandas fehlende Werte korrekt erkennt, müssen diese vorher erst in das interne Format NaN umgewandelt werden (siehe oben).\ndf[df[\u0026#39;Age Range\u0026#39;].isna()] df[df[\u0026#39;Age Range\u0026#39;].notna()]    Mit diesem nützlichen Befehl können Sie sich schnell die Anzahl fehlender Werte in jeder Spalte ausgeben lassen:\ndf.isna().sum()    Dies funktioniert, da Python bei Bedarf einen booleschen Wert implizit in ein numerisches Format konvertiert. True wird zu 1 konvertiert und False zu 0.\nEntfernen # drops all rows that contain at least one missing values df.dropna() # drops all missing values in this series df[\u0026#39;Age Range\u0026#39;].dropna()    Ersetzen df[\u0026#39;Age Range\u0026#39;].fillna(\u0026#34;keine Angabe\u0026#34;)    Standardmäßig werden bei den Operationen fillna oder dropna neue Series oder DataFrames zurückgegeben. Die originale Variable bleibt dabei unangetastet. Mit dem Argument inplace=True werden die originalen Objekte direkt überschrieben.\n  Exkurs: Fehlende Werte (20 Min)  Welche Spalten enthalten alles fehlende Werte? Lesen Sie den Datensatz ein und erstellen Sie einen DataFrame der keine Beobachtungen mit fehlenden Werten mehr enthält. Speicher Sie diesen unter dem Namen Library_Usage_Clean.csv ab. Wie viele Beobachtungen wurden dabei entfernt?    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/","title":"Kursorganisation und Vorbereitungen","tags":[],"description":"","content":"21.01 – 26.01 Kursorganisation und Vorbereitungen Diese Einheit gibt einen Überblick über die Kursinhalte, wichtige Termine und die benötigte Software und Python-Pakete. Viele der hier besprochenen Dinge werden Ihnen schon bekannt vorkommen und die Software haben Sie schon für die vorherigen Module auf Ihrem Rechner installiert.\nZiele  Installieren Sie Anaconda mit Python 3.7 auf Ihrem Rechner In Modul 1 haben Sie eine Git Repositorium erstellt und GitHub gespiegelt. Bitte erstellen Sie in diesem Repositorium einen Ordner namen Module_3 und fügen Sie den Datensatz Ihrem Projektordner hinzu. Füge Sie die Datein auch in das Git-Repositorium hinzu (kleine Erinnerung git add  und git commit -m \u0026quot;Erläuterung\u0026quot;, große Erinnerung). Stellen Sie sicher, dass Python Notebooks lokal ausgeführt werden können Wiederholen Sie die grundlegenden Python Programmier-Basics aus dem ersten Modul  Unsere Python-Kurzreferenz oder dieses Cheat-Sheet gibt einen guten Überblick über die wichtigsten Befehle in Python.\nWeitere Ressourcen  Interaktive Python Online-Tutorials auf learnpython.org Einführung in Python auf kaggle Python Data Analaysis Tutorials Pandas Tutorial auf kaagle    "},{"uri":"https://bonartm.github.io/data-librarian/basics/pandas/functions/","title":"Nützliche Funktionen in Pandas","tags":[],"description":"","content":"Mit df.head() können Sie sich die ersten $n$ Zeilen eines DataFrames anzeigen lassen:\nimport pandas as pd df = pd.read_csv(\u0026#34;../data/Library_Usage.csv\u0026#34;) df.head()    Analog dazu funktioniert die Funktion df.tail().\nPandas Funktionen (5 Min)\nSchauen Sie sich die Dokumentation für die Funktion head() hier an. Wie können Sie sich die ersten $100$ Zeilen anzeigen lassen?\n  Mit df.info() erhalten Sie speicherbezogene Informationen über das Objekt. Mit df.describe() werden nützliche deskriptive Statistiken für alle numerischen Spalten eines Datensatzes ausgegeben. Um alle Spalten miteinzubeziehen nutzen sie das Funktionsargument include='all':\ndf.describe(include=\u0026#39;all\u0026#39;)    Viele Funktionen funktionieren für DataFrames und Series gleichermaßen:\nprint(df.min()) print(df[\u0026#39;Total Renewals\u0026#39;].min())    Mit der Funktion sum() werden die Werte einer Spalte aufaddiert:\ndf[\u0026#39;Total Renewals\u0026#39;].sum() df[\u0026#39;Total Renewals\u0026#39;].between(100, 200).sum()    DataFrames besitzen drei wichtige Attribute, die Informationen über die Spalten, die Datentypen und die Anzahl der Elemente geben:\ndf.columns df.dtypes df.shape "},{"uri":"https://bonartm.github.io/data-librarian/organisation/modules/","title":"Kurseinheiten","tags":[],"description":"","content":"Wir haben das Modul in wöchentliche Einheiten, die jeweils ein Gebiet aufgreifen und vertiefen, unterteilt. Sie können sich die Zeit für die Bearbeitung der Einheiten selber aufteilen, sollten aber jede Einheit am Ende der jeweiligen Woche abgeschlossen haben. Am Ende einer Woche wird die nächste Einheit auf dieser Webeite freigeschaltet.\nJede Einheit umfasst kleine praktische Projektaufgaben, welche Sie in Form eines Jupyter Notebooks bearbeiten und aufbereiten. Zu jeder Einheit werden viele verschiedene Aufgaben mit unterschiedlichem Schwierigkeitsgrad angeboten. Wenn Sie mit einer Aufgabe nicht weiterkommen oder zu viel Zeit aufwenden müssen, können Sie diese am Präsenztag mit den Betreuern besprechen.\nDer erste Teil des Moduls (21.01.2020 - 15.02.2020) wird von Malte Bonart betreut und behandelt grundlegende klassische Konzepte der angewandten Statistik. Der zweite Teil des Moduls (16.02.2020 - 04.03.2020) wird von Konrad Förstner betreut und gibt einen Überblick über Themen des maschinellen Lernens.\nAm Präsenztag, der am 05.03.2020 stattfindet, werden wir im voraus gesammelte Fragen gemeinsam beantworten und diskutieren. Sie werden Zeit haben, an einem persönlichen Datenanalyseprojekt zu arbeiten. Die Kursleiter werden Sie dabei unterstützen und individuell betreuen. Am Ende des Präsenztages stellen alle KursteilnehmerInnen ihre Ergebnisse in einer Kurzpräsentation vor.\n"},{"uri":"https://bonartm.github.io/data-librarian/organisation/schedule/","title":"Termine","tags":[],"description":"","content":"Hier finden Sie einen Überblick über die einzelnen Moduleinheiten.\n   Datum Titel Ziele     21.01 – 26.01 Vorbereitung Installieren Sie die benötigte Software Laden Sie die Kursmaterialien und Datensätze herunter Stellen Sie sicher, dass Python Notebooks lokal ausgeführt werden können   27.01 – 02.02 Grundlagen Beschreiben Sie Datensätze mit dem statistischen Grundvokabular Lesen Sie Datensätze als DataFrames in Python ein Filtern Sie DataFrames nach Spalten oder Zeilen Erstellen Sie neue Variablen   03.02 – 09.02 Deskriptive Statistik und Visualisierung Berechnen Sie grundlegende Lage- und Streuungsmaße Berechnen Sie Statistiken für bivariate Verteilungen Erstellen Sie einfache Visualisierungen   10.02 – 16.02 Inferenzstatistik / Maschinelles Lernen - Grundlagen Führen Sie einen Zwei-Stichproben Mittelwerttest durch    17.02 – 23.02 Maschinelles Lernen - Supervised und Unsupervised Learning Führen Sie Regression, Klassifikation oder Clustering mit scikit-learn durch   24.02 – 01.03 Textmining-Grundlagen Führen eine Textanalyse durch Formulieren Sie einfache quantitative Fragen für den Projekttag als Expose (max. 1 Seite Text)   02.03 – 04.03 Vorbereitung Präsenztag Schicken Sie Ihre inhaltlichen und fachlichen Fragen an die Kursleiter   5.03 Präsenztag Nehmen Sie an der Frage und Antwortrunde teil Finden Sie geeignete Daten zum Lösen der Fragen Beantworten Sie Ihre Frage mit den gelernten statistischen Tools Bereiten Sie die Ergebnisse in Form einer Visualisierung auf Stellen Sie die Ergebnisse in einer Kurzpräsentation in Ihrer Gruppe vor (\u0026lt; 5 Minuten)    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/anaconda/","title":"Conda und Anaconda","tags":[],"description":"","content":"Conda ist eine freie und offene Softwarepaketverwaltung für Python. Neben der Möglichkeit, Pakete (packages, libraries) für Python aus dem Internet zu installieren, können mit conda virtuelle Umgebungen (environments) angelegt werden. Diese Umgebungen beinhalten nur die Pakete und Python Versionen, die für ein spezifisches Projekt gebraucht werden. Umgebungen können mit anderen Personen geteilt werden, sodass sichergestellt ist, dass alle Programmierer mit den gleichen Paketen und Versionen arbeiten, auch wenn sie unterschiedliche Systeme (Windows, Linux, MacOS) verwenden.\nAnaconda basiert auf conda. Mit Anaconda werden eine Vielzahl von Paketen, die für die Datenanalyse gebraucht werden, schon vorinstalliert. Außerdem bietet Anaconda eine vorinstallierte Entwicklungsumgebung (Spyder IDE) und eine vorinstallierte Version von Jupyter, mit der Notebooks gestartet werden können.\nAnaconda (10 Min)  Wenn noch nicht geschehen, können Sie Anaconda hier für Ihr Betriebssystem herunterladen. Wir verwenden die Version für Python 3.7. Öffnen Sie den mit Anaconda installierten Anaconda Navigator und verschaffen Sie sich einen Überblick über die vorhandenen Programme.    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/notebooks/","title":"Jupyter Notebooks","tags":[],"description":"","content":"Die Projekt-Aufgaben und Code-Beispiele in diesem Modul werden über Jupyter Notebooks erstellt und verteilt.\nJupyter Notebooks bieten eine browserbasierte graphische Schnittstelle zur Python Programmierumgebung. Deswegen können Notebooks auf jedem System gestartet werden, man benötigt dazu nur einen Web-Browser und eine lokale installierte Version von Python.\nDarüber hinaus bieten Notebooks die Möglichkeit Text, Visualisierungen und Code in einer integrierten Datei zu erstellen. Somit können einfach statistische Reports und Analysen erstellt werden. Die Replizierbarkeit der Ergebnisse ist auch gewährleistet, da jede Person, die Programmierschritte im Notebook auf dem eignen Rechner wiederholen kann.\nJupyter Notebook enthält einen Dateimanager mit dem Sie durch die Ordner und Dateien Ihres Systems navigieren können. Mit einem Klick auf eine Notebook-Datei öffnet sich ein neues Browser-Tab mit dem Notebook. Notebooks bestehen immer aus Text/ Markdown oder Code Zellen (cells). Der Python Code in den Zellen kann ausgeführt werden und das Ergebnis wird direkt im Notebook angezeigt.\nNotebooks (20 Min)  Laden Sie dieses Notebook herunter (Rechtsklick -\u0026gt; Ziel/Link speichern unter\u0026hellip;) Starten Sie Jupyter Notebook über die Kommandozeile oder über den Anaconda Navigator Navigieren Sie zu dem Speicherort des Notebooks und öffnen Sie es. Markieren Sie die Code-Zelle und führen Sie sie mit einem Klick auf den Run Button oder mit der Tastenkombination Strg+Enter aus Versuchen Sie, die Farbe der Punkte im Plot von Grün auf Rot zu ändern Fügen Sie das Datum und Ihren Namen der Text-Zelle hinzu     Notebook-Dateien erkennen Sie immer an der Dateiendung .ipynb. Diese Dateien können Sie in Jupyter mit dem integrierten Dateimanager öffnen. Jupyter starten Sie entweder über den Anaconda Navigator oder indem Sie den folgenden Befehl in Ihrer Kommandozeile ausführen (Die Kommandozeile danach nicht wieder schließen!):  jupyter notebook  Rufen Sie http://localhost:8890 in Ihrem Browser auf, um zur Oberfläche von Jupyter zu gelangen.      Jupyter Notebook   tutorial_jupyter.ipynb  (21 ko)    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/dataset/","title":"San Francisco Library Usage","tags":[],"description":"","content":"Im ersten Teil des Moduls werden Sie einen offenen Kundendatensatz der Bibliothek in San Francisco analysieren.\n The Integrated Library System (ILS) is composed of bibliographic records including inventoried items, and patron records including circulation data. The data is used in the daily operation of the library, including circulation, online public catalog, cataloging, acquisitions, collection development, processing, and serials control. This dataset represents the usage of inventoried items by patrons \u0026hellip; (Abstract taken from here)\n Anlegen eines Projektordners (15 Min)  Besuchen Sie das offene Daten-Portal der Stadt San Francisco und informieren Sie sich über den Datensatz Erstellen Sie einen Ordner auf Ihrem Computer. Dieser Ordner wird Ihr Projektordner für dieses Modul. Dort legen Sie alle Datensätze und Jupyter Notebooks ab. Erstellen Sie einen Unterordner ./data/ und einen Unterordner ./notebooks/ innerhalb Ihres Projektordners. Laden Sie den Datensatz Library_Usage.csv aus dem Internet herunter und speichern Sie ihn im Projektordner im Unter-Ordner ./data/ ab. Stellen Sie sicher, dass Ihr Projektordner die folgende Verzeichnisstruktur aufweist:  Module_3 ├── data │ └── Library_Usage.csv ├── notebooks │ └── tutorial_jupyter.ipynb    In dieser Excel Tabelle finden Sie eine detallierte Erklärung der einzelnen Variablen des Datensatzes.\n    books by 1 brian is licesed under CC BY-NC-SA 2.0\n  "},{"uri":"https://bonartm.github.io/data-librarian/organisation/packages/","title":"Python Pakete und Bibliothekten","tags":[],"description":"","content":"Die folgende Liste gibt einen kurzen Überblick über die wichtigsten Python Bibliotheken, von denen Sie manche im Modul näher kennenlernen werden. Im ersten Teil des Modules werden wir hauptsächlich mit pandas und seaborn arbeiten.\nProgramming Recap  Module, Paket, Library  Ein Python Skript mit der Endung .py wird Modul genannt. Eine Sammlung von Modulen in einem Ordner, wird Paket (package) genannt. Eine Sammlung von Paketen innerhalb eines größeren Projekts wird Bibliothek (library) genannt. Ein framework ist eine große grundlegende Bibliothek, mit einem bestimmten Zweck und mit vielen Paketen, die voneinander abhängen und aufeinander aufbauen. Die Begriffe werden aber nicht einheitlich benutzt und der Übergang ist oft fließend.   Kommentare stehen immer hinter dem # Zeichen. Text steht immer in Anführungszeichen, z.B \u0026quot;hallo\u0026quot; oder 'hi'. Mit dem import Befehl können externe Bibliotheken mit mehr Funktionalitäten geladen werden. Mit dem Zuweisungsoperator = können Objekte einem Variablennamen oder einem Funktionswert zugeordnet werden, z.B: x = 1, text = 'hallo'. Funktionen werden mit runden Klammern aufgerufen und können Funktionsargumente besitzen, z.B. sum([1, 2, 3]). Viele Funktionen sind Bestandteil von Bibliotheken und werden dann wie folgt aufgerufen: \u0026lt;paketname\u0026gt;.\u0026lt;funktionsname\u0026gt;(\u0026lt;funktionsargumente\u0026gt;)    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/quiz_intro/","title":"Recap: Quiz","tags":[],"description":"","content":" .quiz fieldset { border-color: black; border-width: 10px; margin-bottom: 1em; } .quiz legend { font-size: 105%; font-weight: 600; padding-left: 15px; padding-right: 15px; padding-top: 15px; } .quiz label { display: block; line-height: 1.75em; } .quiz input[type=\"radio\"] { margin-right: 10px; page-break-after: avoid; page-break-before: avoid; } .quiz input[type=\"submit\"] { background: black; color: white; display: block; font-size: 120%; font-weight: 600; height: 2.5em; margin-top: 2em; text-transform: uppercase; width: 100%; } .quiz table { color: white; font-weight: bold; margin: 1em auto 2em auto; width: 100%; } .quiz td { padding: 5px 15px; text-align: left; width: 60px; } .quiz td.missing-label, .quiz td.missing-score { background: #CECBC2; } .quiz td.right-label, .quiz td.right-score { background: #74b559; } .quiz td.wrong-label, .quiz td.wrong-score { background: #D01F3C; }    var choices = \"Strg+R,Enter,Strg+Enter\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Mit welcher Tastenkombination können sie Zellen in Jupyter Notebooks ausführen?\"; var answer = 3 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"weniger als 200,200-400,401-600,mehr als 600\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Wie viele Pakete sind in Anaconda unter der Linux-Python 3.7 Version verfügbar bzw. schon vorinstalliert?\"; var answer = 4 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"423448,423000,15,2103\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Wie viele Zeilen enthält der San Francisco Library Usage Datensatz?\"; var answer = 1 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"das Paket seaborn wird importiert,dem Paket wird der kürzere Name sns zugewiesen,das Standard-Design von mit matplotlib generierten Plots wird angepasst\".split(\",\"); var id = \"vorbereitung_quiz\"; var question = \"Was macht die Funktion sns.set() aus dem seaborn package?\"; var answer = 3 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var quiz = new Quiz(\"vorbereitung_quiz\", questions, {\"shuffle\": true});   "},{"uri":"https://bonartm.github.io/data-librarian/basics/ml/","title":"Statistik, Data Science und Machine Learning","tags":[],"description":"","content":"Seit einigen Jahren sind Data Science und Machine Learning zu alltäglichen Begriffen geworden. Studiengänge im Bereich Data Science werden neu eingerichtet oder schon bestehende Abschlüsse umbenannt. Anwendungen des Maschinellen Lernens sind Thema in Massenmedien. Der Zertifikatskurs Data Librarian spiegelt diese Popularität wieder.\nUm die Zusammenhänge zwischen den Fachgebieten besser zu verstehen, wird im folgenden wird ein kurzer Überblick über die Begriffe gegeben. Für Interessierte gibt es Verweise zu weiteren Quellen.\n trends.embed.renderExploreWidget(\"TIMESERIES\", {\"comparisonItem\":[{\"keyword\":\"data science\",\"geo\":\"DE\",\"time\":\"2010-01-01 2019-11-22\"},{\"keyword\":\"machine learning\",\"geo\":\"DE\",\"time\":\"2010-01-01 2019-11-22\"}],\"category\":0,\"property\":\"\"}, {\"exploreQuery\":\"date=2010-01-01%202019-11-22\u0026geo=DE\u0026q=data%20science,machine%20learning\",\"guestPath\":\"https://trends.google.com:443/trends/embed/\"});  "},{"uri":"https://bonartm.github.io/data-librarian/basics/basic_terms/","title":"Grundbegriffe der Statistik","tags":[],"description":"","content":"In der Kursumgebung finden Sie das Einführungskapitel des Buchs Statistik: Der Weg zur Datenanalyse zum alleinigen persönlichen Gebrauch hier im Kurs hinterlegt.1\nDer Text gibt einen Einstieg in die Aufgaben und Anwendungsbereiche der Statistik und erklärt die grundlegenden Begriffe, mit denen Daten und Datensätze charakterisiert werden können. Nach der Einheit sollten Sie die folgenden Fragen beantworten können:\n Was ist Statistik? Was macht Statistik? Welche grundlegenden Begriffe werden in der Statistik verwendet? Wie kann das Messniveau für Spalten eines Datensatzes bestimmt werden?  Grundbegriffe (60 Min) Beantworten und diskutieren Sie folgende Fragen konkret für den San Francisco Library Usage Datensatz. Halten Sie Ihre Ergebnisse in Stichpunkten fest.\n Wie viele Merkmale besitzt der Datensatz? Wie groß ist die Stichprobengröße des Datensatzes? Wer oder was sind die Merkmalsträger? Von wann bis wann wurden die Daten erhoben? Wie lässt sich die Grundgesamtheit beschreiben? Handelt es sich um eine Vollerhebung? Welche Merkmale sind stetig? Welche diskret? Welchem Skalenniveau entsprechen die einzelnen Merkmale (Nominal-, Ordinal- oder Metrische Skala)? Enthält der Datensatz fehlende Werte? Handelt es sich um Querschnitts-, Längsschnitss- oder Paneldaten?     Zu empfehlen sind auch die englischen Lehrbücher von OpenIntro. Sie können kostenlos auf der Webseite heruntergeladen werden. Für diesen Kurs sind insbesondere die ersten zwei Kapitel des Buchs Introductory Statistics with Randomization and Simulation relevant. 2\n  Fahrmeir, Ludwig, Christian Heumann, Rita Künstler, Iris Pigeot, and Gerhard Tutz. Statistik: Der Weg zur Datenanalyse. Springer-Verlag, 2016, https://www.springer.com/de/book/9783662503713. \u0026#x21a9;\u0026#xfe0e;\n Diez, David, Christopher Barr, and Mine Cetinkaya-Rundel. Introductory Statistics with Randomization and Simulation, 2014, https://www.openintro.org/stat/textbook.php. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://bonartm.github.io/data-librarian/basics/pandas/","title":"Praktische Einführung in Pandas","tags":[],"description":"","content":"Grundlage der statistischen Analyse sind Datentabellen: Jede Zeile der Tabelle entspricht einer Beobachtung. Jede Spalte entspricht einer statistischen Variable. Neue Beobachtungen und Variablen können dadurch einfach an die schon bestehende Tabelle angefügt werden.\nWenn es um Statistik und Programmierung geht werden mit \u0026ldquo;Variable\u0026rdquo; oft zwei unterschiedliche Dinge benannt:\n Variable im Kontext eines statistischen Merkmals, das in der Regel als Spalte eines Datensatzes vorliegt. Variablen im Kontext von Programmiersprachen beschreiben benannte Referenzen auf bestimmte Datenstrukturen oder Objekte (z.B. numbers = [1, 2, 3]).    Am Beginn jeder statistischen Analyse steht die Aufbereitung und Bereinigung der Daten. Damit ist die Behandlung von fehlenden oder falsch kodierten Werten, die Umkodierung und Transformation von statistischen Variablen oder die Berechnung neuer Spalten gemeint. Oft sind auch nur Untergruppen von Beobachtungen mit bestimmten Merkmausausprägungen von Interesse.\nViele statistische Methoden erfordern auch, dass die Daten nur als numerische Werte vorliegen. Daher müssen ordinale oder nominale Variablen, die als Text gespeichert sind (zum Beispiel ['male', 'female', 'female', ...]) in entsprechende numerische Werte umkodiert werden. Dabei wird jeder Kategorie ein numerischer Wert zugeordnet.\nDas Standard-Paket um mit Datentabellen in Python zu arbeiten, ist pandas. Das folgende Kapitel stellt anhand von vielen praktischen Beispielen und Übungen die grundlegenden Konzepte in pandas vor.\n Erstellen Sie ein Jupyter Notebook in Ihrem Projektordner unter ./notebooks. Führen Sie die Beispiele in den folgenden Abschnitten aus und versuchen Sie, die Aufgaben zu lösen. Nach dieser Einheit sollten sie die folgenden Fragen beantworten können:  Wie kann ich Tabellendaten in pandas einlesen? Wie werden Daten in pandas angeordnet? Welche Datentypen können Spalten eines DataFrames annehmen? Wie kann ich einzelne Spalten oder Zeilen eines DataFrames auswählen?      Ihre Verzeichnisstruktur vom Projektordner sollte jetzt ungefähr so aussehen:\nModule_3 ├── data │ └── Library_Usage.csv ├── notebooks │ ├── pandas_introduction.ipynb │ └── tutorial_jupyter.ipynb    What is Pandas? Introduction Video by Giles McMullen ( Untertitel auswählbar)    Dieses Cheat-Sheet gibt einen guten Überblick über die Datenverarbeitung mit Pandas.\n  "},{"uri":"https://bonartm.github.io/data-librarian/basics/reflection/","title":"Reflexion: Datenprojekte an Ihrer Arbeitsstelle","tags":[],"description":"","content":" Datenprojekte an Ihrer Arbeitsstelle (20 Min) Schreiben Sie einen kurzen Text über die Verwendung von Daten und quantitativen Methoden an Ihrem Arbeitsplatz. Denken Sie dabei über folgende Fragen nach:\n Welche Daten sind bei Ihnen vorhanden? Mit welchen Daten arbeiten Sie oder würden Sie gerne arbeiten? Werden statistische Verfahren oder Maschinelles Lernen schon bei Ihnen eingesetzt? Welche Fragen oder Phänomene würden Sie gerne untersuchen? Was fänden Sie spannend herauszufinden?  Teilen Sie Ihren Text mit den anderen KursteilnehmerInnen im Forum zu Modul 3 auf der Kursplattform. Wenn Sie für die Anderen anonym bleiben möchten, können Sie mir auch den Text schicken und ich stelle ihn dann rein.\n  "},{"uri":"https://bonartm.github.io/data-librarian/basics/quiz_pandas/","title":"Recap: Quiz","tags":[],"description":"","content":" .quiz fieldset { border-color: black; border-width: 10px; margin-bottom: 1em; } .quiz legend { font-size: 105%; font-weight: 600; padding-left: 15px; padding-right: 15px; padding-top: 15px; } .quiz label { display: block; line-height: 1.75em; } .quiz input[type=\"radio\"] { margin-right: 10px; page-break-after: avoid; page-break-before: avoid; } .quiz input[type=\"submit\"] { background: black; color: white; display: block; font-size: 120%; font-weight: 600; height: 2.5em; margin-top: 2em; text-transform: uppercase; width: 100%; } .quiz table { color: white; font-weight: bold; margin: 1em auto 2em auto; width: 100%; } .quiz td { padding: 5px 15px; text-align: left; width: 60px; } .quiz td.missing-label, .quiz td.missing-score { background: #CECBC2; } .quiz td.right-label, .quiz td.right-score { background: #74b559; } .quiz td.wrong-label, .quiz td.wrong-score { background: #D01F3C; }    var choices = \"read_excel,to_excel,load_excel,from_excel\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie lautet der Name der Pandas Funktion, mit der Excel-Dateien eingelesen werden können?\"; var answer = 1 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"df.rows,len(df),df.shape[1],df.size\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Mit welchem Befehl kann die Anzahl der Zeilen aus einem DataFrame auslesen?\"; var answer = 2 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"40,423448,0,215\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie viele fehlende Werte enthält die \\x27Age Range\\x27 Variable des Datensatzes?\"; var answer = 4 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var choices = \"263544,7797,159904,12003\".split(\",\"); var id = \"pandas_quiz\"; var question = \"Wie viele Beobachtungen zwischen 60 und 64 Jahren waren zuletzt im Jahr 2016 aktive Kunden der Bibliothek?\"; var answer = 2 ; if (! (id in questions)){ questions[id] = []; } questions[id].push(new Question(question, choices, answer-1));   var quiz = new Quiz(\"pandas_quiz\", questions, {\"shuffle\": true});   "},{"uri":"https://bonartm.github.io/data-librarian/organisation/packages/pandas/","title":"pandas","tags":[],"description":"Bearbeitung, Transformation, Aggregation und Zusammenfassung von Datensätzen. Baut auf numpy auf.","content":"pandas baut auf numpy auf und vereinfacht stark die Bearbeitung, Transformation, Aggregation und Zusammenfassung von zweidimensionalen Datensätzen sowie deren Import und Export in Python. Die zentralen Datenstrukturen in pandas sind Series und DataFrame.\nSeries sind eindimensionale Listen eines Datentypes, ähnlich wie arrays in numpy. Datentypen können ganzzahlige Zahlen (int), binäre Werte vom Typ true oder false (bool), Strings (str) oder reale Zahlen (float) sein.\nIn einem DataFrame werden mehrere Series gleicher Länge spaltenweise zu einer zweidimensionalen Tabelle (wie einer Excel Tabelle) zusammengefasst. Ein DataFrame besitzt außerdem auch immer Spalten- und Zeilennamen.\nWie auch numpy, bietet pandas darüber hinaus viele Funktionen aus der Statistik, zum Beschreiben von Daten. Eine Übersicht gibt es hier.\n# import the library and give it a shorter name \u0026#39;pd\u0026#39; import pandas as pd # create a dataframe by hand with two columns and three rows df = pd.DataFrame({ \u0026#39;month\u0026#39;: [1, 2, 3], \u0026#39;temperatur\u0026#39;: [-12, 3, 9] }) # print out some descriptive statistics df.describe()    Pandas (15 Min)  Kopieren Sie das Codebeispiel in ein Jupyter Notebook und führen Sie es aus. Fügen Sie weitere Temperatur und Monats-Werte dem DataFrame hinzu. Welche Statistiken liefert ein Aufruf der Funktion describe()?    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/packages/matplotlib/","title":"matplotlib","tags":[],"description":"Bietet 2D Plotting Funktionalitäten.","content":"matplotlib ist das Standard-Paket zum Erstellen von wissenschaftlichen 2-dimensionalen statischen Graphiken. Die grundlegende Struktur in matplotlib ist figure, eine leere graphische Fläche, die mit Linien, Balken, Punten, Beschriftungen und Axen befüllt werden kann. Der fertige Plot kann dann in diversen Formaten abgespeichert oder auf dem Bildschirm angezeigt werden.\n# import the package and give it the shorter name \u0026#39;plt\u0026#39; # matplotlib inline import matplotlib.pyplot as plt # create some dummy data x = range(1, 10) # make a simple scatter plot of the data plt.plot(x, x, c=\u0026#34;green\u0026#34;, linestyle=\u0026#39;\u0026#39;, marker=\u0026#39;+\u0026#39;)    matplotlib (15 Min)  Kopieren Sie den Code in ein Jupyter Notebook. Ändern Sie die Farbe der Pukte im Plot von grün auf schwarz. Ändern Sie den Aufruf so um, dass statt Punkte, Linien angezeigt werden. Hier finden Sie die Dokumentation der Funktion matplotlib.pyplot.plot.    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/packages/seaborn/","title":"seaborn","tags":[],"description":"Verbesserung und Weiterentwicklung der matplotlib Bibliothek.","content":"seaborn baut auf matplotlib auf und bietet eine Vielzahl von Funktionen, die es erlauben schnell und einfach schöne statistische Visualisierungen zu erstellen. Seaborn ist also keine komplett eigenenständige Graphik-Bibliothek, sondern nutzt intern die Funktionalitäten und Datenstrukturen von matplotlib.\nEine wichtige Funktion ist die sns.set() Methode. Wenn sie am Anfang eines Python-Scripts ausgeführt wird, wird intern das Design der Plots erheblich verbessert. Alle plots, die nach dem Aufruf der Funktion erstellt werden, sehen viel besser aus.\nTesten Sie den Unterschied mit dem folgenden Beispiel:\n# import the libraries and give them some shorter names import matplotlib.pyplot as plt import seaborn as sns # setup the seaborn library sns.set() # create the same plot as in the previous example x = range(1, 10) plt.plot(x, x)    Wenn Sie im Jupyter Notebook das Code-Beispiel ausgeführt haben und danach den Aufruf sns.set() entfernen, ändert sich das Design des Plots erstmal nicht. Für einen \u0026ldquo;Reset\u0026rdquo; müssen Sie den Kernel (also der im Hintergrund laufende Python Prozess) mit einem Klick auf  neu starten.\n  "},{"uri":"https://bonartm.github.io/data-librarian/organisation/packages/scipy/","title":"scipy","tags":[],"description":"Funktionen und Methoden aus der Statistik.","content":"scipy ist fest mit numpy und pandas verbunden und bietet eine Menge an Funktionen und Methoden aus der Mathematik und Statistik an.\nFür uns ist vor alle das Paket scipy.stats Interessant. Mit ihm können Zufallszahlen aus verschiedensten statistischen Verteilungen generiert werden oder auch statistische Tests durchgeführt werden. Hier finden Sie einen Überblick über alle Methoden des Pakets.\nIm folgenden Beispiel wird ein Zweistichproben-t-Test an zwei numerischen Listen durchgeführt.\n# import the package stats from the library scipy from scipy import stats # create two numerical arrays x = [12, 10, 11, 13, 14, 10, 13, 13, 22] y = [1, 4, 2, 3, 5, 2, 1, 0, 0, 1, 2] # perform a two sample t-test, to test if the samples have different means stats.ttest_ind(x,y)    "},{"uri":"https://bonartm.github.io/data-librarian/organisation/packages/scikitlearn/","title":"scitkit-learn","tags":[],"description":"Bietet Funktionen und Methoden für maschinelles Lernen.","content":"scikit-learn ist eine umfangreiche Bibliothek für maschinelles Lernen in Python. Es bietet eine Vielzahl an verschiedenen Algorithmen, mit denen zum Beispiel Vorhersagen oder Bilderkennung durchgeführt werden können.\n  Faces recognition example using eigenfaces and SVMshttps://scikit-learn.org/stable/auto_examples/applications/plot_face_recognition.html#sphx-glr-auto-examples-applications-plot-face-recognition-py\n  # import the packages import numpy as np from sklearn.linear_model import LinearRegression # create some dummy dependent and independent variable X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]]) y = - 1 * X[:,0] + 2 * X[:,1] # estimate a linear regression and print out the coefficients reg = LinearRegression().fit(X, y) reg.coef_    "},{"uri":"https://bonartm.github.io/data-librarian/basics/","title":"Grundlagen","tags":[],"description":"","content":"27.01 – 02.02 Grundlagen der Datenanalyse in Python Diese Einheit gibt eine Einführung in die Aufgaben und grundlegenden Begriffe der angewandten Statistik. Im zweiten Teil wird das pandas Paket vorgestellt und gezeigt, wie Datensätze eingelesen und bearbeitet werden können. Manche Lektionen und Aufgaben sind als Exkurs markiert. Diese Aufgaben sind für Interessierte und dauern meist etwas länger oder sind schwieriger zu lösen.\nVersuchen Sie zuerst die Aufgaben innerhalb der angegeben Zeit selbstständig zu lösen. Versuchen Sie danach mit Hilfe der Musterlösung die Lösung nachzuvollziehen. Schreiben Sie sich bei Problemen Ihre Fragen auf, damit wir diese am Präsenztag zusammen besprechen können.\nZiele  Beschreiben Sie Datensätze mit dem statistischen Grundvokabular Lesen Sie Datensätze als DataFrames in Python ein und aus Filtern Sie DataFrames nach Spalten oder Zeilen Erstellen Sie neue Variablen Projektaufgabe Die Pressestelle der San Francisco Public Library möchte einen Online-Artikel zum Kundenstamm der Bibliothek erstellen. Dazu hat sie Ihnen einen Datensatz geschickt, den Sie auswerten sollen.\n Erstellen Sie eine Beschreibung des Datensatzes unter Verwendung des statistischen Grundvokabulars. Lesen Sie den Datensatz ein Bereinigen Sie den Datensatz von fehlenden Werten und berechnen Sie die neue Variable Membership Duration.      "},{"uri":"https://bonartm.github.io/data-librarian/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://bonartm.github.io/data-librarian/tags/","title":"Tags","tags":[],"description":"","content":""}]